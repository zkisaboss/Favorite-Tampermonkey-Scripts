// ==UserScript==
// @name            Nova YouTube
// @namespace       https://github.com/raingart/Nova-YouTube-extension/
// @version         0.39.0
// @description     Gives you more control on YouTube

// @author          raingart <raingart+scriptaddons@protonmail.com>
// @license         Apache-2.0
// @icon            https://raw.github.com/raingart/Nova-YouTube-extension/master/icons/48.png

// @homepageURL     https://github.com/raingart/Nova-YouTube-extension
// @supportURL      https://github.com/raingart/Nova-YouTube-extension/issues
// @contributionURL https://www.patreon.com/raingart
// @contributionURL https://www.buymeacoffee.com/raingart
// @contributionURL https://www.paypal.com/donate/?hosted_button_id=B44WLWHZ8AGU2

// @include         http*://*.youtube.com/*
// @include         http*://*.youtube-nocookie.com/*
// @include         http*://youtube.googleapis.com/*
// @include         http*://raingart.github.io/options.html*

// @exclude         http*://*.youtube.com/*.xml*
// @exclude         http*://*.youtube.com/error*
// @exclude         http*://music.youtube.com/*
// @exclude         http*://accounts.youtube.com/*
// @exclude         http*://studio.youtube.com/*

// @grant           GM_addStyle
// @grant           GM_getResourceText
// @grant           GM_getResourceURL
// @grant           GM_addValueChangeListener
// @grant           GM_removeValueChangeListener
// @grant           GM_listValues
// @grant           GM_getValue
// @grant           GM_setValue
// @grant           GM_deleteValue
// @grant           GM_registerMenuCommand
// @grant           GM_unregisterMenuCommand
// @grant           GM_notification
// @grant           GM_openInTab

// @run-at          document-start

// @compatible      chrome >=80 Violentmonkey,Tampermonkey
// @compatible      firefox >=74 Tampermonkey
// ==/UserScript==
/*jshint esversion: 6 */

try {
   document?.body;
} catch (error) {
   return alert(GM_info.script.name + ' Error!\nYour browser does not support chaining operator.');
}

if (GM_info?.scriptHandler == 'Greasemonkey') {
   return alert(GM_info.script.name + ' Error!\nGreasemonkey is not supported.');
}
if (!('MutationObserver' in window)) {
   return alert(GM_info.script.name + ' Error!\nMutationObserver not supported.');
}
window.nova_plugins = [];
window.nova_plugins.push({
   id: 'comments-popup',
   title: 'Comments section in popup',
   run_on_pages: 'watch, -mobile',
   section: 'comments',
   _runtime: user_settings => {
      if (user_settings.comments_visibility_mode == 'disable') return
      const
         COMMENTS_SELECTOR = 'html:not(:fullscreen) #page-manager #comments:not([hidden]):not(:empty)',
         counterAttrName = 'data-counter';
      NOVA.runOnPageInitOrTransition(() => {
         if (NOVA.currentPage == 'watch') {
            NOVA.waitElement('ytd-comments-header-renderer #title #count')
               .then(count => {
                  document.body.querySelector(COMMENTS_SELECTOR)
                     ?.setAttribute(counterAttrName, roundToShortSize(
                        parseInt(count.textContent?.replace(/\D/g, ''), 10)
                     ));
               });
         }
      });
      function roundToShortSize(num) {
         num = +num;
         if (num === 0) return '';
         if (num < 1000) return num;
         const sizes = ['', 'K', 'M', 'B'];
         const i = Math.floor(Math.log(Math.abs(num)) / Math.log(1000));
         if (!sizes[i]) return num;

         return round(num / 1000 ** i, 1) + sizes[i];

         function round(n, precision = 2) {
            const prec = 10 ** precision;
            return Math.round(n * prec) / prec;
         }
      }

      NOVA.waitElement('#masthead-container')
         .then(masthead => {

            NOVA.css.push(
               `${COMMENTS_SELECTOR},
               ${COMMENTS_SELECTOR}:before {
                  position: fixed;
                  top: ${masthead.offsetHeight || 56}px;
                  right: 0;
                  z-index: ${Math.max(
                  getComputedStyle(masthead)['z-index'],

                  601) + 1};
               }

               
               ${COMMENTS_SELECTOR}:not(:hover):before {
                  content: attr(${counterAttrName}) " comments ▼";
                  cursor: pointer;
                  visibility: visible;
                  
                  right: 3em;
                  padding: 0 6px 2px;
                  line-height: normal;
                  font-family: Roboto, Arial, sans-serif;
                  font-size: 11px;
                  color: #eee;
                  background: rgba(0,0,0,0.3);
               }

               
               ${COMMENTS_SELECTOR} {
                  ${(user_settings.comments_popup_width === 100) ? 'margin: 0 1%;' : ''}
                  padding: 0 15px;
                  background-color: #222;
                  border: 1px solid #333;
                  max-width: ${user_settings.comments_popup_width || 40}%;
               }

               ${COMMENTS_SELECTOR}:not(:hover) {
                  visibility: collapse;
               }

               
               ${COMMENTS_SELECTOR}:hover {
                  visibility: visible !important;
               }

               
               ${COMMENTS_SELECTOR} > #sections > #contents {
                  overflow-y: auto;
                  max-height: 88vh;
                  padding-top: 1em;
               }

               #expander.ytd-comment-renderer {
                  overflow-x: hidden;
               }
               
               ${COMMENTS_SELECTOR} #sections {
                  min-width: 500px;
               }

               
               ${COMMENTS_SELECTOR} #contents::-webkit-scrollbar {
                  height: 8px;
                  width: 10px;
               }

               ${COMMENTS_SELECTOR} #contents::-webkit-scrollbar-button {
                  height: 0;
                  width: 0;
               }

               ${COMMENTS_SELECTOR} #contents::-webkit-scrollbar-corner {
                  background: transparent;
               }

               ${COMMENTS_SELECTOR} #contents::-webkit-scrollbar-thumb {
                  background: #e1e1e1;
                  border: 0;
                  border-radius: 0;
               }

               ${COMMENTS_SELECTOR} #contents::-webkit-scrollbar-track {
                  background: #666;
                  border: 0;
                  border-radius: 0;
               }
               ${COMMENTS_SELECTOR} #contents::-webkit-scrollbar-track:hover {
                  background: #666;
               }`);
            if (user_settings.comments_popup_hide_textarea) {
               NOVA.css.push(
                  `${COMMENTS_SELECTOR} > #sections > #contents {
                     overflow-y: auto;
                     max-height: 88vh;
                     border-top: 1px solid #333;
                     padding-top: 1em;
                  }
                  ${COMMENTS_SELECTOR} #header #simple-box {
                     display: none;
                  }
                  
                  ytd-comments-header-renderer {
                     height: 0;
                     margin-top: 10px;
                  }`);
            }
            else {
               NOVA.css.push(
                  `
                  ytd-comments-header-renderer {
                     margin: 10px 0;
                  }`);
            }
         });

   },
});
window.nova_plugins.push({
   id: 'comments-sort',
   title: 'Comments sort',
   run_on_pages: 'watch, -mobile',

   opt_api_key_warn: true,
   section: 'comments',
   _runtime: user_settings => {
      const

         MODAL_NAME_SELECTOR_ID = 'nova-modal-comments',
         MODAL_CONTENT_SELECTOR_ID = 'modal-content';
      insertButton();

      function insertButton() {

         NOVA.waitElement(
            user_settings['comments-popup']
               ? '#masthead-container'
               : '#comments ytd-comments-header-renderer #title'

         )
            .then(menu => {

               const btn = document.createElement('span');
               btn.setAttribute('data-open-modal', MODAL_NAME_SELECTOR_ID);
               btn.title = 'Nova Comments';

               btn.textContent = '►';
               btn.addEventListener('click', () => {

                  if (!document.querySelector(`#${MODAL_CONTENT_SELECTOR_ID} table`)) genTable();
                  btn.dispatchEvent(new CustomEvent(MODAL_NAME_SELECTOR_ID, { bubbles: true, detail: 'test' }));
               });
               Object.assign(btn.style,
                  user_settings['comments-popup']
                     ? {

                        position: 'fixed',
                        right: '0',
                        top: 'var(--ytd-masthead-height)',

                        visibility: 'visible',
                        'z-index':
                           Math.max(
                              (el = document.body.querySelector('.ytp-chrome-top')) && getComputedStyle(el)['z-index'],
                              60) + 1,
                        'font-size': '18px',
                     }
                     : {
                        'font-size': '24px',
                        'text-decoration': 'none',
                        padding: '0 10px',
                        background: 'transparent',
                        border: 'none',
                     },

                  {
                     color: 'orange',
                     cursor: 'pointer',
                  });

               user_settings['comments-popup']
                  ? menu.append(btn)
                  : menu.prepend(btn);
               insertModal();
               connectSortable();

               NOVA.runOnPageInitOrTransition(() => {
                  if (NOVA.currentPage == 'watch') {
                     document.getElementById(MODAL_CONTENT_SELECTOR_ID).innerHTML = '<pre>Loading data...</pre>';
                  }
               });

            });
      }

      function genTable() {
         NOVA.request.API({
            request: 'commentThreads',
            params: {
               'videoId': NOVA.queryURL.get('v') || movie_player.getVideoData().video_id,
               'part': 'snippet',
               'maxResults': 100,
               'order': 'relevance',
            },
            api_key: user_settings['user-api-key'],
         })
            .then(res => {
               if (res?.error) {

                  if (res.reason) {
                     document.getElementById(MODAL_NAME_SELECTOR_ID)
                        .dispatchEvent(new CustomEvent(MODAL_NAME_SELECTOR_ID, { bubbles: true, detail: 'test' }));
                     return alert(`Error [${res.code}]: ${res.reason}`);
                  }

                  else {
                     return document.getElementById(MODAL_CONTENT_SELECTOR_ID).innerHTML =
                        `<pre>Error [${res.code}]: ${res.reason}</pre>
                        <pre>${res.error}</pre>`;
                  }
               }

               let commentList = []
               res?.items?.forEach(item => {
                  if (comment = item.snippet?.topLevelComment?.snippet) {
                     commentList.push(
                        Object.assign(
                           { 'totalReplyCount': item.snippet.totalReplyCount },
                           { 'id': item.id },
                           comment,
                        )
                     );
                  }
                  else {
                     console.warn('API is change', item);
                  }
               });

               if (!commentList.length) {
                  return document.getElementById(MODAL_CONTENT_SELECTOR_ID).innerHTML =
                     `<pre>Total number of comments: ${res.pageInfo.totalResults}</pre>`;
               }

               const ul = document.createElement('tbody');

               commentList
                  .sort((a, b) => b.likeCount - a.likeCount)
                  .forEach(comment => {
                     try {
                        const li = document.createElement('tr');
                        li.className = 'item';

                        li.innerHTML =
                           `<td>${comment.likeCount}</td>
                           <td>${+comment.totalReplyCount ?
                              `<a href="https://www.youtube.com/watch?v=${comment.videoId}&lc=${comment.id}" target="_blank" title="Open">${comment.totalReplyCount}</a>` : comment.totalReplyCount}
                           </td>
                           <td sorttable_customkey="${new Date(comment.updatedAt).getTime()}">${timeSince(new Date(comment.updatedAt))}</td>
                           <td>
                              <a href="${comment.authorChannelUrl}" target="_blank" title="${comment.authorDisplayName}">
                                 <img src="${comment.authorProfileImageUrl}" alt="${comment.authorDisplayName}" />
                              </a>
                           </td>
                           <td>
                              <span class="text-overflow-dynamic-ellipsis">${comment.textDisplay}</span>
                           </td>`;

                        ul.append(li);

                     } catch (error) {
                        console.error('Error comment generate:\n', error.stack + '\n', comment);

                     }
                  });
               const MODAL_CONTENT_FILTER_SELECTOR_ID = 'nova-search-comment';
               document.getElementById(MODAL_CONTENT_SELECTOR_ID).innerHTML =
                  `<table class="sortable" border="0" cellspacing="0" cellpadding="0">
                     <thead id="${MODAL_CONTENT_FILTER_SELECTOR_ID}">
                        <tr>
                           <th class="sorttable_numeric">likes</th>
                           <th class="sorttable_numeric">replys</th>
                           <th class="sorttable_numeric">date</th>
                           <th class="sorttable_nosort">avatars</th>
                           <th class="sorttable_alpha">comments (${res.pageInfo.totalResults})</th>
                        </tr>
                     </thead>
                     ${ul.innerHTML}
                  </table>`;

               sorttable.makeSortable(document.body.querySelector('.sortable'));

               insertFilterInput(MODAL_CONTENT_FILTER_SELECTOR_ID);
            });
      }

      function timeSince(date = required()) {
         if (!(date instanceof Date)) return console.error('Not date type:', date);
         ;
         const samples = [
            { label: 'year', seconds: 31536000 },
            { label: 'month', seconds: 2592000 },
            { label: 'day', seconds: 86400 },
            { label: 'hour', seconds: 3600 },
            { label: 'minute', seconds: 60 },
            { label: 'second', seconds: 1 }
         ];
         const
            now = date.getTime(),
            seconds = Math.floor((Date.now() - Math.abs(now)) / 1000),
            interval = samples.find(i => i.seconds < seconds),
            time = Math.floor(seconds / interval.seconds);
         return `${(now < 0 ? '-' : '') + time} ${interval.label}${time !== 1 ? 's' : ''}`;
      }

      function insertFilterInput(parent_selector_id = required()) {
         if (typeof parent_selector_id !== 'string') {
            return console.error('typeof "parent_selector_id":', (typeof parent_selector_id));
         }

         NOVA.css.push(
            `#${parent_selector_id} {
               position: relative;
            }

            #${parent_selector_id} input {
              position: absolute;
              top: 0;
              right: 0;

              

              
            }

            #${parent_selector_id} input[type=search]:focus,
            #${parent_selector_id} input[type=text]:focus {
               outline: 1px solid #00b7fc;
            }`);

         const searchInput = document.createElement('input');
         searchInput.setAttribute('type', 'search');
         searchInput.setAttribute('placeholder', 'Filter');
         ['change', 'keyup'].forEach(evt => {
            searchInput
               .addEventListener(evt, function () {
                  NOVA.searchFilterHTML({
                     'keyword': this.value,
                     'filter_selectors': 'tr',
                     'highlight_selector': '.text-overflow-dynamic-ellipsis',
                  });
               });
            searchInput
               .addEventListener('click', () => {
                  searchInput.value = '';
                  searchInput.dispatchEvent(new Event('change'));
               });
         });

         document.getElementById(parent_selector_id).append(searchInput);

      };

      function insertModal() {
         NOVA.css.push(
            `.modal {
               --animation-time: .2s;

               z-index: 9999;
               position: fixed;
               top: 0;
               left: 0;
               background: rgba(0, 0, 0, .8);
               display: flex;
               align-items: center;
               justify-content: center;

               width: 100%;
               height: 100%;

               box-sizing: border-box;

               visibility: hidden;
               opacity: 0;

               

            }

            .modal.modal-visible {
               animation: microModalFadeIn var(--animation-time) cubic-bezier(0, 0, .2, 1);
               visibility: visible;
               opacity: 1;
            }

            @keyframes microModalFadeIn {
               from { opacity: 0; }
               to { opacity: 1; }
            }

            .modal-container {
               border-radius: 4px;
               background-color: silver;

               position: relative;
               display: flex;
               box-sizing: border-box;
               overflow-y: auto;
               max-width: 70%;
               max-height: 100vh;

               transform: scale(0.9);
               transition: all var(--animation-time) ease-out;
            }

            .modal.modal-visible .modal-container {
               transform: scale(1);
            }

            .modal-close {
               position: absolute;
               top: 0;
               right: 0;
               cursor: pointer;
               font-size: 2em;
               padding: 0 5px;
               transition: background-color var(--animation-time) ease-out;
            }

            .modal-close:before { content: "\\2715"; }

            .modal-close:hover {
               background-color: #ea3c3c;
            }

            .modal-content {
               padding: 2rem;
            }`);
         NOVA.css.push(
            `.modal {}

            .modal-container {
               
               background-color: var(--yt-spec-base-background);
               background-color: var(--yt-spec-raised-background);
            }

            .modal-content {
               font-size: 12px;
               color: var(--yt-spec-text-primary);
            }`);
         document.body
            .insertAdjacentHTML('beforeend',
               `<div id="${MODAL_NAME_SELECTOR_ID}" class="modal" data-modal>
                  <div class="modal-container">
                     <div class="modal-close" data-close-modal></div>

                     <div class="modal-content" id="${MODAL_CONTENT_SELECTOR_ID}"></div>
                  </div>
               </div>`);
         const modalShowClass = 'modal-visible';
         document.getElementById(MODAL_NAME_SELECTOR_ID)
            .addEventListener('click', ({ target }) => {
               target.dispatchEvent(new CustomEvent(MODAL_NAME_SELECTOR_ID, { bubbles: true, detail: 'test' }));
            });
         document.addEventListener(MODAL_NAME_SELECTOR_ID, ({ target }) => {

            const
               attrModal = target.hasAttribute('data-modal'),
               attrOpen = target.getAttribute('data-open-modal'),
               attrClose = target.hasAttribute('data-close-modal');
            if (attrModal) {
               target.classList.remove(modalShowClass);
            }

            else if (attrOpen && (modal = document.getElementById(attrOpen))) {
               modal.classList.add(modalShowClass);
            }

            else if (attrClose && (modal = target.closest('[data-modal]'))) {
               modal.classList.remove(modalShowClass);
            }
         });
      }

      function connectSortable() {
         NOVA.css.push(
            `table.sortable table {
               width: 100%;
            }

            table.sortable thead {}

            table.sortable thead th {
               text-transform: uppercase;
               cursor: pointer;
            }

            thead, th, td {
               text-align: center;
            }

            table tbody {
               counter-reset: sortabletablescope;
            }

            
            

            #${MODAL_CONTENT_SELECTOR_ID} td .text-overflow-dynamic-ellipsis {
               display: block;
               max-height: 25vh;
               overflow-y: auto;
               text-align: left;
               font-size: 1.2em;
               line-height: 1.4;
               padding: 10px 5px;
               max-width: 600px;
            }
            #${MODAL_CONTENT_SELECTOR_ID} td a {
               text-decoration: none;
               color: var(--yt-spec-call-to-action);
            }`);

         function dean_addEvent(t, e, r) { if (t.addEventListener) t.addEventListener(e, r, !1); else { r.$$guid || (r.$$guid = dean_addEvent.guid++), t.events || (t.events = {}); var o = t.events[e]; o || (o = t.events[e] = {}, t["on" + e] && (o[0] = t["on" + e])), o[r.$$guid] = r, t["on" + e] = handleEvent } } function handleEvent(t) { var e = !0; t = t || fixEvent(((this.ownerDocument || this.document || this).parentWindow || window).event); var r = this.events[t.type]; for (var o in r) this.$$handleEvent = r[o], !1 === this.$$handleEvent(t) && (e = !1); return e } function fixEvent(t) { return t.preventDefault = fixEvent.preventDefault, t.stopPropagation = fixEvent.stopPropagation, t } sorttable = { makeSortable: function (t) { if (0 == t.getElementsByTagName("thead").length && (the = document.createElement("thead"), the.appendChild(t.rows[0]), t.insertBefore(the, t.firstChild)), null == t.tHead && (t.tHead = t.getElementsByTagName("thead")[0]), 1 == t.tHead.rows.length) { sortbottomrows = []; for (var e = 0; e < t.rows.length; e++)-1 != t.rows[e].className.search(/\bsortbottom\b/) && (sortbottomrows[sortbottomrows.length] = t.rows[e]); if (sortbottomrows) { null == t.tFoot && (tfo = document.createElement("tfoot"), t.appendChild(tfo)); for (e = 0; e < sortbottomrows.length; e++)tfo.appendChild(sortbottomrows[e]); delete sortbottomrows } headrow = t.tHead.rows[0].cells; for (e = 0; e < headrow.length; e++)headrow[e].className.match(/\bsorttable_nosort\b/) || (mtch = headrow[e].className.match(/\bsorttable_([a-z0-9]+)\b/), mtch && (override = mtch[1]), mtch && "function" == typeof sorttable["sort_" + override] ? headrow[e].sorttable_sortfunction = sorttable["sort_" + override] : headrow[e].sorttable_sortfunction = sorttable.guessType(t, e), headrow[e].sorttable_columnindex = e, headrow[e].sorttable_tbody = t.tBodies[0], dean_addEvent(headrow[e], "click", sorttable.innerSortFunction = function (t) { if (-1 != this.className.search(/\bsorttable_sorted\b/)) return sorttable.reverse(this.sorttable_tbody), this.className = this.className.replace("sorttable_sorted", "sorttable_sorted_reverse"), this.removeChild(document.getElementById("sorttable_sortfwdind")), sortrevind = document.createElement("span"), sortrevind.id = "sorttable_sortrevind", sortrevind.innerHTML = "&nbsp;&#x25B4;", void this.appendChild(sortrevind); if (-1 != this.className.search(/\bsorttable_sorted_reverse\b/)) return sorttable.reverse(this.sorttable_tbody), this.className = this.className.replace("sorttable_sorted_reverse", "sorttable_sorted"), this.removeChild(document.getElementById("sorttable_sortrevind")), sortfwdind = document.createElement("span"), sortfwdind.id = "sorttable_sortfwdind", sortfwdind.innerHTML = "&nbsp;&#x25BE;", void this.appendChild(sortfwdind); theadrow = this.parentNode, forEach(theadrow.childNodes, (function (t) { 1 == t.nodeType && (t.className = t.className.replace("sorttable_sorted_reverse", ""), t.className = t.className.replace("sorttable_sorted", "")) })), sortfwdind = document.getElementById("sorttable_sortfwdind"), sortfwdind && sortfwdind.parentNode.removeChild(sortfwdind), sortrevind = document.getElementById("sorttable_sortrevind"), sortrevind && sortrevind.parentNode.removeChild(sortrevind), this.className += " sorttable_sorted", sortfwdind = document.createElement("span"), sortfwdind.id = "sorttable_sortfwdind", sortfwdind.innerHTML = "&nbsp;&#x25BE;", this.appendChild(sortfwdind), row_array = [], col = this.sorttable_columnindex, rows = this.sorttable_tbody.rows; for (var e = 0; e < rows.length; e++)row_array[row_array.length] = [sorttable.getInnerText(rows[e].cells[col]), rows[e]]; row_array.sort(this.sorttable_sortfunction), tb = this.sorttable_tbody; for (e = 0; e < row_array.length; e++)tb.appendChild(row_array[e][1]); delete row_array })) } }, guessType: function (t, e) { sortfn = sorttable.sort_alpha; for (var r = 0; r < t.tBodies[0].rows.length; r++)if (text = sorttable.getInnerText(t.tBodies[0].rows[r].cells[e]), "" != text && text.match(/^-?[£$¤]?[\d,.]+%?$/)) return sorttable.sort_numeric; return sortfn }, getInnerText: function (t) { if (!t) return ""; if (hasInputs = "function" == typeof t.getElementsByTagName && t.getElementsByTagName("input").length, null != t.getAttribute("sorttable_customkey")) return t.getAttribute("sorttable_customkey"); if (void 0 !== t.textContent && !hasInputs) return t.textContent.replace(/^\s+|\s+$/g, ""); if (void 0 !== t.innerText && !hasInputs) return t.innerText.replace(/^\s+|\s+$/g, ""); if (void 0 !== t.text && !hasInputs) return t.text.replace(/^\s+|\s+$/g, ""); switch (t.nodeType) { case 3: if ("input" == t.nodeName.toLowerCase()) return t.value.replace(/^\s+|\s+$/g, ""); case 4: return t.nodeValue.replace(/^\s+|\s+$/g, ""); case 1: case 11: for (var e = "", r = 0; r < t.childNodes.length; r++)e += sorttable.getInnerText(t.childNodes[r]); return e.replace(/^\s+|\s+$/g, ""); default: return "" } }, reverse: function (t) { newrows = []; for (var e = 0; e < t.rows.length; e++)newrows[newrows.length] = t.rows[e]; for (e = newrows.length - 1; e >= 0; e--)t.appendChild(newrows[e]); delete newrows }, sort_numeric: function (t, e) { return aa = parseFloat(t[0].replace(/[^0-9.-]/g, "")), isNaN(aa) && (aa = 0), bb = parseFloat(e[0].replace(/[^0-9.-]/g, "")), isNaN(bb) && (bb = 0), aa - bb }, sort_alpha: function (t, e) { return t[0].localeCompare(e[0]) } }, dean_addEvent.guid = 1, fixEvent.preventDefault = function () { this.returnValue = !1 }, fixEvent.stopPropagation = function () { this.cancelBubble = !0 }, Function.prototype.forEach = function (t, e, r) { for (var o in t) void 0 === this.prototype[o] && e.call(r, t[o], o, t) }, String.forEach = function (t, e, r) { Array.forEach(t.split(""), (function (o, n) { e.call(r, o, n, t) })) }; var forEach = function (t, e, r) { if (t) { var o = Object; if (t instanceof Function) o = Function; else { if (t.forEach instanceof Function) return void t.forEach(e, r); "string" == typeof t ? o = String : "number" == typeof t.length && (o = Array) } o.forEach(t, e, r) } };

      }

   },
});
window.nova_plugins.push({
   id: 'comments-visibility',
   title: 'Collapse comments section',
   run_on_pages: 'watch, -mobile',
   restart_on_location_change: true,
   section: 'comments',
   _runtime: user_settings => {
      NOVA.collapseElement({
         selector: '#comments',
         title: 'comments',
         remove: (user_settings.comments_visibility_mode == 'disable') ? true : false,
      });

   },
});
window.nova_plugins.push({
   id: 'square-avatars',
   title: 'Square avatars',
   run_on_pages: 'all, -live_chat',
   section: 'comments',
   _runtime: user_settings => {
      NOVA.css.push(
         [
            'yt-img-shadow',
            '.ytp-title-channel-logo',
            '#player .ytp-title-channel',
            'ytm-profile-icon',
            'a.ytd-thumbnail',
         ]
            .join(',\n') + ` {
               border-radius: 0 !important;
            }`);

      NOVA.waitUntil(() => {
         if (window.yt && (obj = yt?.config_?.EXPERIMENT_FLAGS) && Object.keys(obj).length) {
            yt.config_.EXPERIMENT_FLAGS.web_rounded_thumbnails = false;
            return true;
         }
      });

   },
});
window.nova_plugins.push({
   id: 'comments-expand',
   title: 'Expand comments',
   run_on_pages: 'watch, -mobile',
   section: 'comments',
   _runtime: user_settings => {
      NOVA.css.push(
         `
         #expander.ytd-comment-renderer {
            overflow-x: hidden;
         }`);
      NOVA.watchElements({
         selectors: ['#contents #expander[collapsed] #more:not([hidden])'],
         attr_mark: 'nova-comment-expanded',
         callback: btn => {
            const moreExpand = () => btn.click();
            const comment = btn.closest('#expander[collapsed]');
            switch (user_settings.comments_expand_mode) {
               case 'onhover':
                  comment.addEventListener('mouseenter', moreExpand, { capture: true, once: true });
                  break;

               case 'always':
                  moreExpand();
                  break;
            }
         },
      });
      NOVA.watchElements({
         selectors: ['#more-replies button'],
         attr_mark: 'nova-replies-expanded',
         callback: btn => {
            const moreExpand = () => btn.click();
            switch (user_settings.comments_view_reply) {
               case 'onhover':
                  btn.addEventListener('mouseenter', moreExpand, { capture: true, once: true });
                  break;

               case 'always':
                  moreExpand();
                  break;
            }
         },
      });
   },
});
const NOVA = {
   waitElement(selector = required(), container) {
      if (typeof selector !== 'string') return console.error('wait > selector:', typeof selector);
      if (container && !(container instanceof HTMLElement)) return console.error('wait > container not HTMLElement:', container);
      return new Promise(resolve => {
         if (element = (container || document.body || document).querySelector(selector)) {

            return resolve(element);
         }

         new MutationObserver((mutationRecordsArray, observer) => {
            for (const record of mutationRecordsArray) {
               for (const node of record.addedNodes) {
                  if (![1, 3, 8].includes(node.nodeType)) continue;

                  if (node.matches && node.matches(selector)) {

                     observer.disconnect();
                     return resolve(node);
                  }
                  else if (
                     (parentEl = node.parentElement || node)
                     && (parentEl instanceof HTMLElement)
                     && (element = parentEl.querySelector(selector))
                  ) {

                     observer.disconnect();
                     return resolve(element);
                  }
               }
            }

            if (document?.readyState != 'loading'
               && (element = (container || document?.body || document).querySelector(selector))
            ) {

               observer.disconnect();
               return resolve(element);
            }
         })
            .observe(container || document.body || document.documentElement || document, {
               childList: true,
               subtree: true,
            });
      });
   },
   async waitUntil(condition = required(), timeout = 100) {
      if (typeof condition !== 'function') return console.error('waitUntil > condition is not fn:', typeof condition);

      return new Promise((resolve) => {
         if (result = condition()) {

            resolve(result);
         }
         else {
            const interval = setInterval(() => {
               if (result = condition()) {

                  clearInterval(interval);
                  resolve(result);
               }

            }, timeout);
         }
      });
   },

   async sleep(timeout = 100) {
      return new Promise(resolve => setTimeout(resolve, timeout));
   },

   watchElements_list: {},
   watchElements({ selectors = required(), attr_mark, callback = required() }) {

      if (!Array.isArray(selectors) && typeof selectors !== 'string') return console.error('watch > selector:', typeof selectors);
      if (typeof callback !== 'function') return console.error('watch > callback:', typeof callback);
      this.waitElement((typeof selectors === 'string') ? selectors : selectors.join(','))
         .then(video => {

            !Array.isArray(selectors) && (selectors = selectors.split(',').map(s => s.trim()));

            process();

            this.watchElements_list[attr_mark] = setInterval(() =>
               document.visibilityState == 'visible' && process(), 1000 * 1.5);
            function process() {

               selectors
                  .forEach(selectorItem => {
                     if (attr_mark) selectorItem += `:not([${attr_mark}])`;
                     document.body.querySelectorAll(selectorItem)
                        .forEach(el => {
                           if (attr_mark) el.setAttribute(attr_mark, true);
                           callback(el);

                        });
                  });
            }
         });

   },
   runOnPageInitOrTransition(callback) {
      if (!callback || typeof callback !== 'function') {
         return console.error('runOnPageInitOrTransition > callback not function:', ...arguments);
      }
      let lastURL = location.href;
      const isURLChange = () => (lastURL === location.href) ? false : lastURL = location.href;

      isURLChange() || callback();
      document.addEventListener('yt-navigate-finish', () => isURLChange() && callback());
   },
   css: {
      push(css = required(), selector, important) {

         if (typeof css === 'object') {
            if (!selector) return console.error('injectStyle > empty json-selector:', ...arguments);
            injectCss(selector + json2css(css));
            function json2css(obj) {
               let css = '';
               Object.entries(obj)
                  .forEach(([key, value]) => {
                     css += key + ':' + value + (important ? ' !important' : '') + ';';
                  });
               return `{ ${css} }`;
            }
         }
         else if (css && typeof css === 'string') {
            if (document.head) {
               injectCss(css);
            }
            else {
               window.addEventListener('load', () => injectCss(css), { capture: true, once: true });
            }
         }
         else {
            console.error('addStyle > css:', typeof css);
         }

         function injectCss(source = required()) {
            let sheet;

            if (source.endsWith('.css')) {
               sheet = document.createElement('link');
               sheet.rel = 'sheet';
               sheet.href = source;
            }
            else {
               const sheetId = 'NOVA-style';
               sheet = document.getElementById(sheetId) || (function () {
                  const style = document.createElement('style');
                  style.type = 'text/css';
                  style.id = sheetId;
                  return document.head.appendChild(style);
               })();
            }

            sheet.textContent += '\n' + source
               .replace(/\n+\s{2,}/g, ' ')
               + '\n';
         }
      },
      getValue(selector = required(), prop_name = required()) {
         return (el = document.body?.querySelector(selector))
            ? getComputedStyle(el).getPropertyValue(prop_name) : null;
      },
   },
   collapseElement({ selector = required(), title = required(), remove }) {

      const selector_id = `${title.match(/[a-z]+/gi).join('')}-prevent-load-btn`;

      this.waitElement(selector.toString())
         .then(el => {
            if (remove) el.remove();
            else {
               if (document.getElementById(selector_id)) return;

               el.style.display = 'none';

               const btn = document.createElement('a');
               btn.textContent = `Load ${title}`;
               btn.id = selector_id;
               btn.className = 'more-button style-scope ytd-video-secondary-info-renderer';

               Object.assign(btn.style, {
                  cursor: 'pointer',
                  'text-align': 'center',
                  'text-transform': 'uppercase',
                  display: 'block',
                  color: 'var(--yt-spec-text-secondary)',
               });
               btn.addEventListener('click', () => {
                  btn.remove();

                  el.style.display = 'unset';
                  window.dispatchEvent(new Event('scroll'));
               });
               el.before(btn);
            }
         });
   },

   calculateAspectRatio: {

      sizeToFit({
         srcWidth = 0, srcHeight = 0,
         maxWidth = window.innerWidth,
         maxHeight = window.innerHeight
      }) {

         const aspectRatio = Math.min(+maxWidth / +srcWidth, +maxHeight / +srcHeight);
         return {
            width: +srcWidth * aspectRatio,
            height: +srcHeight * aspectRatio,
         };
      },

      fitToSize({ width = required(), height = required() }) {
         const
            gcd = (a, b) => b ? gcd(b, a % b) : a,
            divisor = gcd(width, height);

         return width / divisor + ':' + height / divisor;
      },
   },
   bezelTrigger(text) {

      if (!text) return;
      if (typeof this.fateBezel === 'number') clearTimeout(this.fateBezel);
      const bezelEl = document.body.querySelector('.ytp-bezel-text');
      if (!bezelEl) return console.warn(`bezelTrigger ${text}=>${bezelEl}`);

      const
         bezelContainer = bezelEl.parentElement.parentElement,
         BEZEL_SELECTOR_TOGGLE = '.ytp-text-root';

      if (!this.bezel_css_inited) {
         this.bezel_css_inited = true;
         this.css.push(
            `${BEZEL_SELECTOR_TOGGLE} { display: block !important; }
            ${BEZEL_SELECTOR_TOGGLE} .ytp-bezel-text-wrapper {
               pointer-events: none;
               z-index: 40 !important;
            }
            ${BEZEL_SELECTOR_TOGGLE} .ytp-bezel-text { display: inline-block !important; }
            ${BEZEL_SELECTOR_TOGGLE} .ytp-bezel { display: none !important; }`);
      }

      bezelEl.textContent = text;
      bezelContainer.classList.add(BEZEL_SELECTOR_TOGGLE);

      this.fateBezel = setTimeout(() => {
         bezelContainer.classList.remove(BEZEL_SELECTOR_TOGGLE);
         bezelEl.textContent = '';
      }, 600);
   },
   getChapterList(video_duration = required()) {

      let timestampsCollect = [];
      if (NOVA.currentPage != 'embed') {

         getFromDescription();
      }

      return timestampsCollect.length ? timestampsCollect
         : getFromAPI();
      function getFromDescription() {
         const selectorTimestampLink = 'a[href*="&t="]';
         let
            nowComment,
            prevSec = -1;

         [

            (
               document.body.querySelector('ytd-watch-flexy')?.playerData?.videoDetails.shortDescription
               || document.body.querySelector('ytd-watch-metadata #description.ytd-watch-metadata')?.textContent
            ),
            //...[...document.body.querySelectorAll(`#comments #comment #comment-content:has(${selectorTimestampLink})`)]

            ...[...document.body.querySelectorAll(`#comments #comment #comment-content a[href*="&t="] + *:last-child`)]

               .map(el => ({
                  'source': 'comment',
                  'text': el.closest('#comment')?.textContent,
               })),
         ]
            .forEach(data => {
               if (timestampsCollect.length > 1) return;

               nowComment = Boolean(data?.source);

               (data?.text || data)
                  ?.split('\n')
                  .forEach(line => {
                     line = line?.toString().trim();
                     if (line.length > 5 && line.length < 200 && (timestamp = /((\d?\d:){1,2}\d{2})/g.exec(line))) {

                        timestamp = timestamp[0];
                        const
                           sec = NOVA.timeFormatTo.hmsToSec(timestamp),
                           timestampPos = line.indexOf(timestamp);

                        if (
                           (nowComment ? true : (sec > prevSec && sec < +video_duration))

                           && (timestampPos < 5 || (timestampPos + timestamp.length) === line.length)
                        ) {
                           if (nowComment) prevSec = sec;

                           timestampsCollect.push({
                              'sec': sec,
                              'time': timestamp,
                              'title': line
                                 .replace(timestamp, '')
                                 .trim().replace(/^[:\-–—|]|(\[\])?|[:\-–—.;|]$/g, '')
                                 //.trim().replace(/^([:\-–—|]|(\d+[\.)]))|(\[\])?|[:\-–—.;|]$/g, '') 

                                 .trim()
                           });
                        }
                     }
                  });
            });
         if (nowComment && timestampsCollect.length == 1 && timestampsCollect[0].sec < (video_duration / 3)) {
            return timestampsCollect;
         }

         if (timestampsCollect.length > 1) {
            if (nowComment) {

               timestampsCollect = timestampsCollect.sort((a, b) => a.sec - b.sec);
            }

            return timestampsCollect;
         }
      }

      function getFromAPI() {

         if (!window.ytPubsubPubsubInstance) {
            return console.error('ytPubsubPubsubInstance is null:', ytPubsubPubsubInstance);
         }

         const data = Object.values((
            ytPubsubPubsubInstance.i
            || ytPubsubPubsubInstance.j
            || ytPubsubPubsubInstance.subscriptions_
         )
            .find(a => a?.player)
            .player.app
         )
            .find(a => a?.videoData)
            ?.videoData.multiMarkersPlayerBarRenderer;

         if (data?.markersMap?.length) {
            return data.markersMap[0].value.chapters
               ?.map(c => {
                  const sec = +c.chapterRenderer.timeRangeStartMillis / 1000;
                  return {
                     'sec': sec,
                     'time': NOVA.timeFormatTo.HMS.digit(sec),
                     'title':
                        c.chapterRenderer.title.simpleText
                        || c.chapterRenderer.title.runs[0].text,
                  };
               });
         }
      }
   },
   searchFilterHTML({ keyword = required(), filter_selectors = required(), highlight_selector }) {

      keyword = keyword.toString().toLowerCase();

      document.body.querySelectorAll(filter_selectors)
         .forEach(item => {
            const
               text = item.textContent,

               hasText = text?.toLowerCase().includes(keyword),
               highlight = el => {

                  el.innerHTML = el.innerHTML
                     .replace(/<\/?mark[^>]*>/g, '');
                  item.style.display = hasText ? '' : 'none';
                  if (hasText && keyword) {
                     highlightTerm({
                        'target': el,
                        'keyword': keyword,

                     });
                  }
               };

            (highlight_selector ? item.querySelectorAll(highlight_selector) : [item])
               .forEach(highlight);
         });

      function highlightTerm({ target = required(), keyword = required(), highlightClass }) {

         const
            content = target.innerHTML,
            pattern = new RegExp('(>[^<.]*)?(' + keyword + ')([^<.]*)?', 'gi'),
            highlightStyle = highlightClass ? `class="${highlightClass}"` : 'style="background-color:#afafaf"',
            replaceWith = `$1<mark ${highlightStyle}>$2</mark>$3`,
            marked = content.replaceAll(pattern, replaceWith);

         return (target.innerHTML = marked) !== content;
      }
   },
   isMusic() {
      return checkMusicType();
      function checkMusicType() {
         const
            channelName = movie_player.getVideoData().author.toUpperCase(),
            titleStr = movie_player.getVideoData().title,
            titleWordsList = titleStr?.toUpperCase().match(/\w+/g),
            playerData = document.body.querySelector('ytd-watch-flexy')?.playerData;
         return [
            titleStr,
            location.href,
            channelName,

            playerData?.microformat?.playerMicroformatRenderer.category,

            playerData?.title,
         ]
            .some(i => i?.toUpperCase().includes('MUSIC'))
            || document.body.querySelector('#upload-info #channel-name .badge-style-type-verified-artist')
            || (channelName && /(VEVO|Topic|Records|AMV)$/.test(channelName))
            || (channelName && /(MUSIC|ROCK|SOUNDS|SONGS)/.test(channelName))
            || titleWordsList?.length && ['🎵', '♫', 'SONG', 'SOUND', 'SONGS', 'SOUNDTRACK', 'LYRIC', 'LYRICS', 'AMBIENT', 'MIX', 'VEVO', 'CLIP', 'KARAOKE', 'OPENING', 'COVER', 'COVERED', 'VOCAL', 'INSTRUMENTAL', 'ORCHESTRAL', 'DNB', 'BASS', 'BEAT', 'HITS', 'ALBUM', 'PLAYLIST', 'DUBSTEP', 'CHILL', 'RELAX', 'CLASSIC', 'CINEMATIC']
               .some(i => titleWordsList.includes(i))
            || ['OFFICIAL VIDEO', 'OFFICIAL AUDIO', 'FEAT.', 'FT.', 'LIVE RADIO', 'DANCE VER', 'HIP HOP', 'ROCK N ROLL', 'HOUR VER', 'HOURS VER', 'INTRO THEME']
               .some(i => titleStr.includes(i))
            || titleWordsList?.length && ['OP', 'ED', 'MV', 'PV', 'OST', 'NCS', 'BGM', 'EDM', 'GMV', 'AMV', 'MMD', 'MAD']
               .some(i => titleWordsList.includes(i));
      }
   },
   timeFormatTo: {
      hmsToSec(str) {
         let
            parts = str.split(':'),
            sec = 0;
         switch (parts.length) {
            case 2: sec = parts[0] * 60 + parts[1] * 1; break;
            case 3: sec = parts[0] * 60 * 60 + parts[1] * 60 + parts[2] * 1; break;
         }
         return sec;
      },

      HMS: {
         digit(time_sec = required()) {
            const
               ts = Math.abs(+time_sec),
               d = ~~(ts / 86400),
               h = ~~((ts % 86400) / 3600),
               m = ~~((ts % 3600) / 60),

               s = Math.floor(ts % 60);

            return (d ? `${d}d ` : '')
               + (h ? (d ? h.toString().padStart(2, '0') : h) + ':' : '')
               + (h ? m.toString().padStart(2, '0') : m) + ':'
               + s.toString().padStart(2, '0');
         },
         abbr(time_sec = required()) {
            const
               ts = Math.abs(+time_sec),
               d = ~~(ts / 86400),
               h = ~~((ts % 86400) / 3600),
               m = ~~((ts % 3600) / 60),

               s = Math.floor(ts % 60);

            return (d ? `${d}d ` : '')
               + (h ? (d ? h.toString().padStart(2, '0') : h) + 'h' : '')
               + (m ? (h ? m.toString().padStart(2, '0') : m) + 'm' : '')
               + (s ? (m ? s.toString().padStart(2, '0') : s) + 's' : '');
         },
      },
   },

   queryURL: {
      has: (query = required(), url_string) => new URL(url_string || location).searchParams.has(query.toString()),

      get: (query = required(), url_string) => new URL(url_string || location).searchParams.get(query.toString()),
      set(query_obj = {}, url_string) {

         if (!Object.keys(query_obj).length) return console.error('query_obj:', query_obj)
         const url = new URL(url_string || location);
         Object.entries(query_obj).forEach(([key, value]) => url.searchParams.set(key, value));
         return url.toString();
      },

      remove(query = required(), url_string) {
         const url = new URL(url_string || location);
         url.searchParams.delete(query.toString());
         return url.toString();
      },
   },

   request: (() => {
      const API_STORE_NAME = 'YOUTUBE_API_KEYS';

      async function getKeys() {
         NOVA.log('request.API: fetch to youtube_api_keys.json');

         return await fetch('https://gist.githubusercontent.com/raingart/ff6711fafbc46e5646d4d251a79d1118/raw/youtube_api_keys.json')
            .then(res => res.text())

            .then(keys => {
               NOVA.log(`get and save keys in localStorage`, keys);
               localStorage.setItem(API_STORE_NAME, keys);
               return JSON.parse(keys);
            })

            .catch(error => {
               localStorage.removeItem(API_STORE_NAME);
               throw error;

            })
            .catch(reason => console.error('Error get keys:', reason));
      }

      return {

         async API({ request = required(), params = required(), api_key }) {
            const YOUTUBE_API_KEYS = localStorage.hasOwnProperty(API_STORE_NAME)
               ? JSON.parse(localStorage.getItem(API_STORE_NAME)) : await getKeys();

            if (!api_key && (!Array.isArray(YOUTUBE_API_KEYS) || !YOUTUBE_API_KEYS?.length)) {
               localStorage.hasOwnProperty(API_STORE_NAME) && localStorage.removeItem(API_STORE_NAME);
               return console.error('YOUTUBE_API_KEYS empty:', YOUTUBE_API_KEYS);
            }

            const referRandKey = arr => api_key || 'AIzaSy' + arr[Math.floor(Math.random() * arr.length)];

            const query = Object.keys(params)
               .map(k => encodeURIComponent(k) + '=' + encodeURIComponent(params[k]))
               .join('&');

            const URL = `https://www.googleapis.com/youtube/v3/${request}?${query}&key=` + referRandKey(YOUTUBE_API_KEYS);
            return await fetch(URL)
               .then(response => response.json())
               .then(json => {
                  if (!json?.error && Object.keys(json).length) return json;
                  console.warn('used key:', NOVA.queryURL.get('key', URL));
                  throw new Error(JSON.stringify(json?.error));
               })
               .catch(error => {
                  localStorage.removeItem(API_STORE_NAME);
                  console.error(`Request API failed:${URL}\n${error}`);
                  if (error?.message && (err = JSON.parse(error?.message))) {
                     return {
                        'code': err.code,
                        'reason': err.errors?.length && err.errors[0].reason,
                        'error': err.message,
                     };
                  }
               });
         },
      };

   })(),
   getPlayerState(state) {
      return {
         '-1': 'UNSTARTED',
         0: 'ENDED',
         1: 'PLAYING',
         2: 'PAUSED',
         3: 'BUFFERING',
         5: 'CUED'
      }[state || movie_player.getPlayerState()];
   },
   videoElement: (() => {
      const videoSelector = '#movie_player:not(.ad-showing) video';

      document.addEventListener('canplay', ({ target }) => {
         target.matches(videoSelector) && (NOVA.videoElement = target);
      }, { capture: true, once: true });

      document.addEventListener('play', ({ target }) => {
         target.matches(videoSelector) && (NOVA.videoElement = target);
      }, true);

   })(),
   async getChannelId(api_key) {
      const isChannelId = id => id && /UC([a-z0-9-_]{22})$/i.test(id);

      let result = [

         document.querySelector('meta[itemprop="channelId"][content]')?.content,

         (document.body.querySelector('ytd-app')?.__data?.data?.response
            || document.body.querySelector('ytd-app')?.data?.response
            || window.ytInitialData
         )
            ?.metadata?.channelMetadataRenderer?.externalId,
         document.querySelector('link[itemprop="url"][href]')?.href.split('/')[4],
         location.pathname.split('/')[2],

         document.body.querySelector('#video-owner a[href]')?.href.split('/')[4],
         document.body.querySelector('a.ytp-ce-channel-title[href]')?.href.split('/')[4],

         document.body.querySelector('ytd-watch-flexy')?.playerData?.videoDetails.channelId,
      ]
         .find(i => isChannelId(i));
      return result;
   },

   log() {
      if (this.DEBUG && arguments.length) {
         console.groupCollapsed(...arguments);
         console.trace();
         console.groupEnd();
      }
   }
}
window.nova_plugins.push({
   id: 'description-expand',
   title: 'Expand description',
   run_on_pages: 'watch, -mobile',

   section: 'details',
   _runtime: user_settings => {

      if (user_settings['description-popup']) return;
      NOVA.watchElements({
         selectors: [
            '#meta [collapsed] #more',
            '[description-collapsed] #description #expand',
         ],

         callback: btn => {
            if (user_settings.description_expand_mode == 'onhover') {
               btn.addEventListener('mouseenter', ({ target }) => btn.click(), { capture: true, once: true });
            }

            else {
               btn.click();
            }

         }

      });

   },
});
window.nova_plugins.push({
   id: 'channel-videos-count',
   title: 'Show channel videos count',
   run_on_pages: 'watch, channel, -mobile',
   restart_on_location_change: true,
   section: 'details',
   opt_api_key_warn: true,
   _runtime: user_settings => {

      const
         CACHE_PREFIX = 'nova-channel-videos-count:',
         SELECTOR_ID = 'nova-video-count';

      switch (NOVA.currentPage) {
         case 'watch':
            NOVA.waitElement('#upload-info #owner-sub-count, ytm-slim-owner-renderer .subhead')
               .then(el => setVideoCount(el));
            break;

         case 'channel':
            NOVA.waitElement('#channel-header #subscriber-count, .c4-tabbed-header-subscriber-count')

               .then(el => setVideoCount(el));
            break;
      }

      async function setVideoCount(container = required()) {

         const channelId = await NOVA.getChannelId(user_settings['user-api-key']);
         if (!channelId) return console.error('setVideoCount channelId: empty', channelId);
         if (storage = sessionStorage.getItem(CACHE_PREFIX + channelId)) {
            insertToHTML({ 'text': storage, 'container': container });
         }
         else {
            NOVA.request.API({
               request: 'channels',
               params: { 'id': channelId, 'part': 'statistics' },
               api_key: user_settings['user-api-key'],
            })
               .then(res => {
                  if (res?.error) return alert(`Error [${res.code}]: ${res.reason}\n` + res.error);

                  res?.items?.forEach(item => {
                     if (videoCount = +item.statistics.videoCount) {
                        insertToHTML({ 'text': videoCount, 'container': container });

                        sessionStorage.setItem(CACHE_PREFIX + channelId, videoCount);

                     } else console.warn('API is change', item);
                  });
               });
         }

         function insertToHTML({ text = '', container = required() }) {

            if (!(container instanceof HTMLElement)) return console.error('container not HTMLElement:', container);

            (document.getElementById(SELECTOR_ID) || (function () {
               container.insertAdjacentHTML('beforeend',
                  `<span class="date style-scope ytd-video-secondary-info-renderer" style="margin-right:5px;"> • <span id="${SELECTOR_ID}">${text}</span> videos</span>`);
               return document.getElementById(SELECTOR_ID);
            })())
               .textContent = text;

            container.title = `${text} videos`;
         }

      }

   },
});
window.nova_plugins.push({
   id: 'save-to-playlist',
   title: 'Add sort/filter to "Save to playlist" menu',
   run_on_pages: 'watch, -mobile',
   section: 'details',
   _runtime: user_settings => {
      NOVA.waitElement('tp-yt-paper-dialog #playlists')
         .then(playlists => {
            const container = playlists.closest('tp-yt-paper-dialog');

            new IntersectionObserver(([entry]) => {
               const searchInput = container.querySelector('input[type=search]')

               if (entry.isIntersecting) {
                  if (user_settings.save_to_playlist_sort) sortPlaylistsMenu(playlists);

                  if (!searchInput) insertFilterInput(playlists);
               }

               else if (searchInput) {
                  searchInput.value = '';
                  searchInput.dispatchEvent(new Event('change'));
               }
            })
               .observe(container);
         });

      function sortPlaylistsMenu(playlists = required()) {
         if (!(playlists instanceof HTMLElement)) return console.error('playlists not HTMLElement:', playlists);

         playlists.append(...Array.from(playlists.childNodes).sort(sortByLabel));

         function sortByLabel(a, b) {
            const getLabel = (el = required()) => stringLocaleCompare(
               el.querySelector('#checkbox-label').textContent
            );
            return (getLabel(a) > getLabel(b)) ? 1 : -1;

            function stringLocaleCompare(a, b) {

               return a.localeCompare(b, undefined, { numeric: true, sensitivity: 'base' });
            }
         }
      }

      function insertFilterInput(container = required()) {

         if (!(container instanceof HTMLElement)) return console.error('container not HTMLElement:', container);

         const searchInput = document.createElement('input');
         searchInput.setAttribute('type', 'search');
         searchInput.setAttribute('placeholder', 'Playlist Filter');
         Object.assign(searchInput.style, {
            padding: '.4em .6em',
            border: 0,

            'margin-bottom': '1.5em',
         });

         ['change', 'keyup'].forEach(evt => {
            searchInput
               .addEventListener(evt, function () {
                  NOVA.searchFilterHTML({
                     'keyword': this.value,
                     'filter_selectors': 'ytd-playlist-add-to-option-renderer',
                     'highlight_selector': '#label',
                  });
               });
            searchInput
               .addEventListener('click', () => {
                  searchInput.value = '';
                  searchInput.dispatchEvent(new Event('change'));
               });
         });

         container.prepend(searchInput);
      };

   },
});
window.nova_plugins.push({
   id: 'description-timestamps-scroll',
   title: 'No scroll to player on timestamps',
   run_on_pages: 'watch, -mobile',
   section: 'details',
   _runtime: user_settings => {
      document.addEventListener('click', evt => {

         if (!evt.target.matches('a[href*="&t="]')) return;

         if (sec = NOVA.timeFormatTo.hmsToSec(evt.target.textContent)) {
            evt.preventDefault();
            evt.stopPropagation();
            evt.stopImmediatePropagation();
            movie_player.seekTo(sec);
         }
      }, { capture: true });

   },
});
window.nova_plugins.push({
   id: 'description-popup',
   title: 'Description section in popup',
   run_on_pages: 'watch, -mobile',
   section: 'details',
   _runtime: user_settings => {
      const
         DESCRIPTION_SELECTOR = 'html:not(:fullscreen) ytd-watch-metadata #description.ytd-watch-metadata:not([hidden]):not(:empty)',
         DATE_SELECTOR_ID = 'nova-description-date';

      NOVA.waitElement('#masthead-container')
         .then(masthead => {

            NOVA.css.push(

               `${DESCRIPTION_SELECTOR},
               ${DESCRIPTION_SELECTOR}:before {
                  position: fixed;
                  top: ${masthead.offsetHeight || 56}px;
                  right: 0;
                  z-index: ${Math.max(
                  getComputedStyle(masthead)['z-index'],

                  601) + 1};
               }

               
               ${DESCRIPTION_SELECTOR}:not(:hover):before {
                  content: "info ▼";
                  cursor: pointer;
                  visibility: visible;
                  
                  right: 12.5em;
                  padding: 0 8px 2px;
                  line-height: normal;
                  font-family: Roboto, Arial, sans-serif;
                  font-size: 11px;
                  color: #eee;
                  background: rgba(0,0,0,0.3);
               }

               
               ${DESCRIPTION_SELECTOR} {
                  margin: 0 1%;
                  overflow-y: auto;
                  max-height: 88vh;
                  max-width: 55%;
                  background-color: #222;
                  border: 1px solid #333;
                  border-radius: 0 !important;
               }

               ${DESCRIPTION_SELECTOR}:not(:hover) {
                  visibility: collapse;
                  overflow: hidden;
               }

               
               ${DESCRIPTION_SELECTOR}:hover {
                  visibility: visible !important;
               }

               
               ${DESCRIPTION_SELECTOR}::-webkit-scrollbar {
                  height: 8px;
                  width: 10px;
               }

               ${DESCRIPTION_SELECTOR}::-webkit-scrollbar-button {
                  height: 0;
                  width: 0;
               }

               ${DESCRIPTION_SELECTOR}::-webkit-scrollbar-corner {
                  background: transparent;
               }

               ${DESCRIPTION_SELECTOR}::-webkit-scrollbar-thumb {
                  background: #e1e1e1;
                  border: 0;
                  border-radius: 0;
               }

               ${DESCRIPTION_SELECTOR}::-webkit-scrollbar-track {
                  background: #666;
                  border: 0;
                  border-radius: 0;
               }

               ${DESCRIPTION_SELECTOR}::-webkit-scrollbar-track:hover {
                  background: #666;
               }`);
         });

      NOVA.runOnPageInitOrTransition(() => (NOVA.currentPage == 'watch') && restoreDateLine());
      NOVA.waitElement(DESCRIPTION_SELECTOR)
         .then(descriptionEl => {
            descriptionEl.addEventListener('mouseenter', evt => {
               document.body.querySelector('#meta [collapsed] #more, [description-collapsed] #description #expand')
                  ?.click();
            });

         });
      let oldDateText;
      function restoreDateLine() {
         NOVA.waitElement('#title h1')
            .then(container => {

               NOVA.waitElement('ytd-watch-metadata #description.ytd-watch-metadata')
                  .then(async textDateEl => {
                     await NOVA.waitUntil(() => {
                        if ((text = [...textDateEl.querySelectorAll('.bold.yt-formatted-string')]
                           ?.slice(0, 3)
                           .map(e => e.textContent)
                           ?.join('')?.trim()
                        )
                           && text != oldDateText
                        ) {
                           oldDateText = text;
                           insertToHTML({ 'text': oldDateText, 'container': container });
                           return true;
                        }
                     }, 1000);
                  });
            });

         function insertToHTML({ text = '', container = required() }) {

            if (!(container instanceof HTMLElement)) return console.error('container not HTMLElement:', container);

            (document.getElementById(DATE_SELECTOR_ID) || (function () {
               container.insertAdjacentHTML('afterend',
                  `<span id="${DATE_SELECTOR_ID}" class="style-scope yt-formatted-string bold" style="font-size: 1.35rem; line-height: 2rem; font-weight:400;">${text}</span>`);
               return document.getElementById(DATE_SELECTOR_ID);
            })())
               .textContent = text;
         }

      }

   },
});
window.nova_plugins.push({
   id: 'button-no-labels',
   title: 'Buttons without labels',

   run_on_pages: 'watch, -mobile',
   section: 'details',
   _runtime: user_settings => {
      let styles =

         `ytd-watch-metadata #actions button ${user_settings.buttons_hide ? '' : '.cbox'} {
            display: none;
         }
         ytd-watch-metadata #actions button .yt-spec-button-shape-next__icon {
            margin: 0 !important;
         }
         
         ytd-watch-metadata #actions ytd-segmented-like-dislike-button-renderer ~ * button,
         ytd-watch-metadata #actions #top-level-buttons-computed ~ * button.yt-spec-button-shape-next--size-m {
            padding: 0 7px;
         }`;

      if (user_settings.button_no_labels_opacity) {
         styles +=
            `#subscribe-button:not(:hover),
            ytd-watch-metadata #actions #menu:not(:hover) {
               transition: opacity .2s ease-in-out;
               opacity: .1;
            }`;
      }

      NOVA.css.push(styles);

   },
});
window.nova_plugins.push({
   id: 'redirect-disable',
   title: 'Clear links from redirect',
   run_on_pages: 'watch, channel',
   section: 'details',
   _runtime: user_settings => {
      document.addEventListener('click', ({ target }) => patchLink(target), { capture: true });

      document.addEventListener('auxclick', evt => evt.button === 1 && patchLink(evt.target), { capture: true });

      function patchLink(target = required()) {
         const linkSelector = 'a[href*="/redirect?"]';

         if (!target.matches(linkSelector)) {
            if (!(target = target.closest(linkSelector))) return;
         }

         if (q = NOVA.queryURL.get('q', target.href)) {
            target.href = decodeURIComponent(q);

         }
      }

   },
});
window.nova_plugins.push({
   id: 'metadata-hide',
   title: 'Hide metadata',
   run_on_pages: 'watch',
   section: 'details',
   _runtime: user_settings => {

      NOVA.css.push(
         `ytd-watch-metadata > ytd-metadata-row-container-renderer {
            display: none;
         }`);

   },
});
window.nova_plugins.push({
   id: 'header-compact',
   title: 'Header compact',
   run_on_pages: 'all, -embed, -mobile, -live_chat',
   section: 'header',
   _runtime: user_settings => {

      const height = '36px';

      NOVA.css.push(
         `#masthead #container.ytd-masthead {
            max-height: ${height} !important;
         }

         
         #masthead #background {
            max-height: ${height} !important;
         }

         #search-form, #search-icon-legacy {
            max-height: ${height} !important;
         }

         body,
         html:not(:fullscreen) #page-manager {
            --ytd-masthead-height: ${height};
         }

         #chips-wrapper.ytd-feed-filter-chip-bar-renderer {
            --ytd-rich-grid-chips-bar-top: ${height};
         }`);

   },
});
window.nova_plugins.push({
   id: 'header-unfixed',
   title: 'Header unpinned',

   run_on_pages: 'all, -embed, -mobile, -live_chat',

   section: 'header',
   _runtime: user_settings => {

      const
         CLASS_NAME_TOGGLE = 'nova-header-unfixed',
         SELECTOR = 'html.' + CLASS_NAME_TOGGLE;

      NOVA.css.push(

         `${SELECTOR} #masthead-container {
            position: absolute !important;
         }
         ${SELECTOR} #chips-wrapper {
            position: sticky !important;
         }
         ${SELECTOR} #header {
            margin-top: 0 !important;
         }`);
      document.documentElement.classList.add(CLASS_NAME_TOGGLE);

      if (user_settings.header_unfixed_hotkey) {
         const hotkey = user_settings.header_unfixed_hotkey || 'v';

         document.addEventListener('keyup', evt => {
            if (['input', 'textarea'].includes(evt.target.localName) || evt.target.isContentEditable) return;
            if (evt.key === hotkey) {
               document.documentElement.classList.toggle(CLASS_NAME_TOGGLE);
            }
         });
      }

      if (user_settings.header_unfixed_scroll) {
         createArrowButton();

         document.addEventListener('yt-action', evt => {

            if (evt.detail?.actionName == 'yt-store-grafted-ve-action'
            ) {

               scrollAfter();
            }
         });

         function scrollAfter() {
            if ((masthead = document.getElementById('masthead'))
               && (topOffset = masthead.offsetHeight)
               && isInViewport(masthead)
            ) {
               window.scrollTo({ top: topOffset });
            }

            function isInViewport(el = required()) {
               if (el instanceof HTMLElement) {
                  const bounding = el.getBoundingClientRect();
                  return (
                     bounding.top >= 0 &&
                     bounding.left >= 0 &&
                     bounding.bottom <= window.innerHeight &&
                     bounding.right <= window.innerWidth
                  );
               }
            }
         }
         function createArrowButton() {
            const scrollDownButton = document.createElement('button');
            scrollDownButton.textContent = '▼';
            scrollDownButton.title = 'Scroll down';
            Object.assign(scrollDownButton.style, {
               cursor: 'pointer',
               background: 'transparent',
               color: 'deepskyblue',
               border: 'none',
            });
            scrollDownButton.onclick = scrollAfter;

            if (endnode = document.getElementById('end')) {
               endnode.parentElement.insertBefore(scrollDownButton, endnode);
            }
         }
      }

   },
});
window.nova_plugins.push({
   id: 'page-logo',

   title: 'YouTube logo link',
   run_on_pages: 'all, -embed, -mobile, -live_chat',
   section: 'header',
   _runtime: user_settings => {
      NOVA.waitElement('#masthead a#logo')
         .then(a => a.href = new URL(user_settings.page_logo_url_mode)?.href);

   },
});
window.nova_plugins.push({
   id: 'search-query',
   title: 'Search filters',
   run_on_pages: 'results',
   restart_on_location_change: true,
   section: 'header',
   _runtime: user_settings => {
      if (!NOVA.queryURL.has('sp')
         && (sp = user_settings.search_query_date || user_settings.search_query_sort)
      ) {
         location.href = NOVA.queryURL.set({ 'sp': sp });

      }
   },
});
window.nova_plugins.push({
   id: 'channel-default-tab',
   title: 'Default tab on channel page',

   run_on_pages: 'channel',
   restart_on_location_change: true,
   section: 'channel',
   _runtime: user_settings => {
      const
         urlArr = location.pathname.split('/').filter(Boolean),
         [page, channelTab, channelTabAlt] = urlArr;
      if (urlArr.length > 2
         || ['featured', 'videos', 'shorts', 'streams', 'playlists', 'community', 'channels', 'about'].includes(channelTabAlt || channelTab)
      ) return;

      if (user_settings.channel_default_tab_mode == 'redirect' || user_settings.channel_default_tab != 'videos') {
         location.pathname += '/' + user_settings.channel_default_tab;
      }
      else {

         NOVA.waitElement('#tabsContent>[role="tab"]:nth-child(2)[aria-selected=true]')
            .then(() => {
               let tab_nth;
               switch (user_settings.channel_default_tab) {
                  default: tab_nth = 4;
               }

               document.body.querySelector(`#tabsContent>[role="tab"]:nth-child(${tab_nth})[aria-selected="false"]`)
                  ?.click();
            });
      }

   },
});
window.nova_plugins.push({
   id: 'thumbnails-watched',
   title: 'Mark watched thumbnails',
   run_on_pages: 'home, results, feed, channel, watch, -mobile',

   section: 'other',
   _runtime: user_settings => {
      NOVA.css.push(
         `a#thumbnail,
         a[class*="thumbnail"] {
            outline: 1px solid var(--yt-spec-general-background-a);
         }

         
         a#thumbnail:visited,
         a[class*="thumbnail"]:visited {
            outline: 1px solid ${user_settings.thumbnails_watched_frame_color || 'red'} !important;
         }

         
         ytd-playlist-panel-video-renderer a:visited #meta * {
            color: ${user_settings.thumbnails_watched_title_color || '#ff4500'} !important;
         }`);

      if (user_settings.thumbnails_watched_title) {
         NOVA.css.push(
            `a#video-title:visited:not(:hover),
            #description a:visited {
               color: ${user_settings.thumbnails_watched_title_color} !important;
            }`);
      }
   },
});
window.nova_plugins.push({
   id: 'disable-video-cards',
   title: 'Hide garbage: annotations, endcards etc',
   run_on_pages: 'results, watch, embed, -mobile',
   section: 'other',
   _runtime: user_settings => {
      let selectorsList = [

         '.ytp-paid-content-overlay',

         '.iv-branding',
         '.ytp-autohide > [class^="ytp-ce-"]',
         '.ytp-cards-teaser-text',
         'ytm-paid-content-overlay-renderer',
      ];

      switch (NOVA.currentPage) {
         case 'embed':

            selectorsList.push([
               '.ytp-pause-overlay',

               '.ytp-info-panel-preview',
            ]);
            break;

         default:
            selectorsList.push([
               'ytd-search-pyv-renderer',

               '[class^="ytd-promoted-"]',
               'ytd-video-renderer + ytd-shelf-renderer',
               'ytd-video-renderer + ytd-reel-shelf-renderer',
               '.ytd-watch-flexy.attached-message',
               'ytd-popup-container tp-yt-paper-dialog ytd-single-option-survey-renderer',

               '#donation-shelf ytd-donation-unavailable-renderer',
               '.sparkles-light-cta',
               'ytd-feed-nudge-renderer',
            ]);
            NOVA.css.push(
               [
                  'ytd-rich-item-renderer:has(ytd-ad-slot-renderer)',
                  'ytd-item-section-renderer:has(ytd-ad-slot-renderer)',
                  'ytd-live-chat-frame#chat[collapsed]:has(iframe#chatframe[src="about:blank"])',
               ]
                  .join(',\n') + `{ display: none !important;}`);
      }

      if (selectorsList.length) {
         NOVA.css.push(
            selectorsList.join(',\n') + ` {
               display: none !important;
            }`);
      }

   },
});
window.nova_plugins.push({
   id: 'rss-link',
   title: 'Add RSS feed link',
   run_on_pages: 'channel, playlist, -mobile',
   restart_on_location_change: true,
   section: 'channel',

   _runtime: user_settings => {
      const
         SELECTOR_ID = 'nova-rss-link',
         rssLinkPrefix = '/feeds/videos.xml',
         playlistURL = rssLinkPrefix + '?playlist_id=' + NOVA.queryURL.get('list'),
         genChannelURL = channelId => rssLinkPrefix + '?channel_id=' + channelId;
      switch (NOVA.currentPage) {
         case 'channel':

            NOVA.waitElement('#links-holder #primary-links')
               .then(async container => {
                  if (url = document.querySelector('link[type="application/rss+xml"][href]')?.href
                     || genChannelURL(await NOVA.getChannelId(user_settings['user-api-key']))
                  ) {
                     insertToHTML({ 'url': url, 'container': container });
                  }
               });
            break;

         case 'playlist':
            NOVA.waitElement('#owner-container')
               .then(container => {
                  insertToHTML({ 'url': playlistURL, 'container': container });
               });
            break;
      }

      function insertToHTML({ url = required(), container = required() }) {

         if (!(container instanceof HTMLElement)) return console.error('container not HTMLElement:', container);

         (document.getElementById(SELECTOR_ID) || (function () {
            const link = document.createElement('a');
            link.id = SELECTOR_ID;
            link.target = '_blank';

            link.innerHTML =

               `<svg viewBox="-40 -40 55 55" height="100%" width="100%" style="width: auto;">
                  <g fill="currentColor">
                     <path fill="#F60" d="M-17.392 7.875c0 3.025-2.46 5.485-5.486 5.485s-5.486-2.46-5.486-5.485c0-3.026 2.46-5.486 5.486-5.486s5.486 2.461 5.486 5.486zm31.351 5.486C14.042.744 8.208-11.757-1.567-19.736c-7.447-6.217-17.089-9.741-26.797-9.708v9.792C-16.877-19.785-5.556-13.535.344-3.66a32.782 32.782 0 0 1 4.788 17.004h8.827v.017zm-14.96 0C-.952 5.249-4.808-2.73-11.108-7.817c-4.821-3.956-11.021-6.184-17.255-6.15v8.245c6.782-.083 13.432 3.807 16.673 9.774a19.296 19.296 0 0 1 2.411 9.326h8.278v-.017z"/>
                  </g>
               </svg>`;
            Object.assign(link.style, {
               height: '20px',
               display: 'inline-block',
               padding: '5px',
            });
            container.prepend(link);
            return link;
         })())
            .href = url;
      }

   },
});
window.nova_plugins.push({
   id: 'scroll-to-top',
   title: 'Add "Scroll to top" button',
   run_on_pages: 'all, -embed, -mobile, -live_chat',
   section: 'other',
   _runtime: user_settings => {

      document.addEventListener('scroll', insertButton, { capture: true, once: true });

      function insertButton() {
         const SELECTOR_ID = 'nova-scrollTop-btn';

         const btn = document.createElement('button');
         btn.id = SELECTOR_ID;
         Object.assign(btn.style, {
            position: 'fixed',
            cursor: 'pointer',
            bottom: 0,
            left: '20%',

            visibility: 'hidden',
            opacity: .5,
            width: '40%',
            height: '40px',
            border: 'none',

            outline: 'none',
            'z-index': 1,
            'border-radius': '100% 100% 0 0',
            'font-size': '16px',
            'background-color': 'rgba(0,0,0,.3)',
            'box-shadow': '0 16px 24px 2px rgba(0, 0, 0, .14), 0 6px 30px 5px rgba(0, 0, 0, .12), 0 8px 10px -5px rgba(0, 0, 0, .4)',
         });
         btn.addEventListener('click', () => {
            window.scrollTo({
               top: 0,

               behavior: user_settings.scroll_to_top_smooth ? 'smooth' : 'instant',
            });
            if (user_settings.scroll_to_top_autoplay && NOVA.currentPage == 'watch'

               && ['UNSTARTED', 'PAUSED'].includes(NOVA.getPlayerState())
            ) {
               movie_player.playVideo();

            }
         });
         const arrow = document.createElement('span');
         Object.assign(arrow.style, {
            border: 'solid white',
            'border-width': '0 3px 3px 0',
            display: 'inline-block',
            padding: '4px',
            'vertical-align': 'middle',
            transform: 'rotate(-135deg)',
         });
         btn.append(arrow);
         document.body.append(btn);
         NOVA.css.push(
            `#${SELECTOR_ID}:hover {
               opacity: 1 !important;
               background-color: rgba(0,0,0,.6) !important;
            }`);
         const scrollTop_btn = document.getElementById(SELECTOR_ID);
         let sOld;
         window.addEventListener('scroll', () => {

            const sCurr = document.documentElement.scrollTop > (window.innerHeight / 2);
            if (sCurr == sOld) return;
            sOld = sCurr;
            scrollTop_btn.style.visibility = sCurr ? 'visible' : 'hidden';

         });
      }

   },
});
window.nova_plugins.push({
   id: 'thumbs-hide',
   title: 'Thumbnails filtering',
   run_on_pages: 'home, results, feed, channel, watch, -mobile',
   section: 'other',
   _runtime: user_settings => {
      const
         thumbsSelectors = [
            'ytd-rich-item-renderer',
            'ytd-video-renderer',
            'ytd-grid-video-renderer',
            'ytd-compact-video-renderer',
            'ytm-compact-video-renderer',
            'ytm-item-section-renderer'
         ]
            .join(',');
      document.addEventListener('yt-action', evt => {

         if ([
            'yt-append-continuation-items-action',
            'ytd-update-grid-state-action',
            'yt-service-request',
            'ytd-rich-item-index-update-action',
         ]
            .includes(evt.detail?.actionName)
         ) {
            switch (NOVA.currentPage) {
               case 'home':
                  thumbRemove.live();
                  thumbRemove.mix();
                  break;

               case 'results':
                  thumbRemove.live();
                  thumbRemove.shorts();
                  thumbRemove.mix();
                  break;

               case 'feed':
                  thumbRemove.live();
                  thumbRemove.streamed();
                  thumbRemove.shorts();
                  thumbRemove.premieres();
                  thumbRemove.mix();
                  break;

               case 'channel':
                  thumbRemove.live();
                  thumbRemove.streamed();

                  thumbRemove.premieres();
                  break;

               case 'watch':
                  thumbRemove.live();
                  thumbRemove.mix();
                  break;
            }
         }
      });

      const thumbRemove = {
         shorts() {
            if (!user_settings.shorts_disable) return;

            if (NOVA.currentPage == 'channel' && NOVA.channelTab == 'shorts') return;

            document.body.querySelectorAll('a#thumbnail[href*="shorts/"]')
               .forEach(el => el.closest(thumbsSelectors)?.remove());
            if (+user_settings.shorts_disable_min_duration) {
               document.body.querySelectorAll('#thumbnail #overlays #text:not(:empty)')
                  .forEach(el => {
                     if ((thumb = el.closest(thumbsSelectors))
                        && NOVA.timeFormatTo.hmsToSec(el.textContent.trim()) < (+user_settings.shorts_disable_min_duration || 60)
                     ) {
                        thumb.remove();
                     }
                  });
            }
         },

         premieres() {
            if (!user_settings.premieres_disable) return;

            document.body.querySelectorAll(
               `#thumbnail #overlays [aria-label="Premiere"],
               #thumbnail #overlays [aria-label="Upcoming"]`
            )
               .forEach(el => el.closest(thumbsSelectors)?.remove());
            document.body.querySelectorAll('#video-badges > [class*="live-now"]')
               .forEach(el => el.closest(thumbsSelectors)?.remove());
         },

         live() {
            if (!user_settings.live_disable) return;

            if (NOVA.currentPage == 'channel' && NOVA.channelTab == 'streams') return;
            document.body.querySelectorAll('#thumbnail img[src*="_live.jpg"]')
               .forEach(el => el.closest(thumbsSelectors)?.remove());
         },

         streamed() {
            if (!user_settings.streamed_disable) return;

            if (NOVA.currentPage == 'channel' && NOVA.channelTab == 'streams') return;

            document.body.querySelectorAll('#metadata-line > span:last-of-type')
               .forEach(el => {
                  if (el.textContent?.split(' ').length === 4
                     && (thumb = el.closest(thumbsSelectors))) {
                     thumb.remove();
                  }
               });
         },

         mix() {
            if (!user_settings.mix_disable) return;

            document.body.querySelectorAll(
               `a[href*="list="][href*="start_radio="]:not([hidden]),
               #video-title[title^="Mix -"]:not([hidden])`
            )
               .forEach(el => el.closest('ytd-radio-renderer, ytd-compact-radio-renderer, ' + thumbsSelectors)?.remove());
         },
      };

      if (user_settings.mix_disable) {
         NOVA.css.push(
            `ytd-radio-renderer {
               display: none !important;
            }`);
      }

   },
});
window.nova_plugins.push({
   id: 'thumbnails-clear',
   title: 'Clear thumbnails',
   run_on_pages: 'home, feed, channel, watch',
   section: 'other',
   _runtime: user_settings => {

      const
         ATTR_MARK = 'nova-thumb-preview-cleared',
         thumbsSelectors = [

            'ytd-video-renderer',
            'ytd-grid-video-renderer',

            'ytm-compact-video-renderer',
            'ytm-item-section-renderer'
         ];
      let DISABLE_YT_IMG_DELAY_LOADING_default = false;
      NOVA.watchElements({
         selectors: [
            '#thumbnail:not(.ytd-playlist-thumbnail):not([class*=markers]):not([href*="/shorts/"]) img[src]:not([src*="_live.jpg"])',
            'a:not([href*="/shorts/"]) img.video-thumbnail-img[src]:not([src*="_live.jpg"])'
         ],
         attr_mark: ATTR_MARK,
         callback: async img => {
            if (NOVA.currentPage == 'results') return;
            if (window.yt?.config_?.DISABLE_YT_IMG_DELAY_LOADING
               && DISABLE_YT_IMG_DELAY_LOADING_default !== window.yt?.config_?.DISABLE_YT_IMG_DELAY_LOADING
            ) {

               DISABLE_YT_IMG_DELAY_LOADING_default = window.yt?.config_?.DISABLE_YT_IMG_DELAY_LOADING;

               await NOVA.sleep(100);

               document.body.querySelectorAll(`[${ATTR_MARK}]`).forEach(e => e.removeAttribute(ATTR_MARK));
            }
            if ((thumb = img.closest(thumbsSelectors))
               && thumb.querySelector(
                  `#badges [class*="live-now"],
                  #overlays [aria-label="PREMIERE"],
                  ytd-thumbnail-overlay-time-status-renderer [overlay-style="UPCOMING"]`)
            ) {

               return;
            }

            if (src = patchImg(img.src)) img.src = patchImg(src);
         },
      });
      if (user_settings.thumbnails_clear_overlay) {
         NOVA.css.push(
            `#hover-overlays {
               visibility: hidden !important;
            }`);
      }

      if (user_settings.thumbnails_overlay_playing) {
         document.addEventListener('yt-action', evt => {

            if ([
               'yt-append-continuation-items-action',
               'ytd-update-grid-state-action',
               'yt-service-request',
               'ytd-rich-item-index-update-action',
            ]
               .includes(evt.detail?.actionName)
            ) {
               document.body.querySelectorAll('#mouseover-overlay')
                  .forEach(el => el.remove());
            }
         });
      }
      function patchImg(str) {
         if ((re = /(\w{2}default|hq\d+)./i) && re.test(str)) {
            return str.replace(re, (user_settings.thumbnails_clear_preview_timestamp || 'hq2') + '.');
         }
      }

   },
});
window.nova_plugins.push({
   id: 'thumbs-title-filter',
   title: 'Block thumbnails by title',
   run_on_pages: 'all, -embed, -mobile, -live_chat',
   section: 'other',
   _runtime: user_settings => {
      const keywords = user_settings.thumb_filter_title_blocklist
         ?.split(/[\n,;]/)
         .map(e => e.toString().trim().toLowerCase())
         .filter(e => e.length);

      const thumbsSelectors = [
         'ytd-rich-item-renderer',
         'ytd-video-renderer',
         'ytd-grid-video-renderer',
         'ytd-compact-video-renderer',
         'ytm-compact-video-renderer',
         'ytm-item-section-renderer'
      ]
         .join(',');
      document.addEventListener('yt-action', evt => {

         if ([
            'yt-append-continuation-items-action',
            'ytd-update-grid-state-action',
            'yt-service-request',
            'ytd-rich-item-index-update-action',
         ]
            .includes(evt.detail?.actionName)
         ) {
            hideThumb();
         }
      });

      function hideThumb() {
         document.body.querySelectorAll('#video-title')
            .forEach(el => {
               keywords.forEach(keyword => {
                  if (el.textContent.toLowerCase().includes(keyword) && (thumb = el.closest(thumbsSelectors))) {
                     thumb.remove();
                  }
               });
            });
      }
   },
});
window.nova_plugins.push({
   id: 'search-filter',
   title: 'Blocked channels',
   run_on_pages: 'results',
   section: 'other',
   _runtime: user_settings => {
      const keywords = user_settings.search_filter_channel_blocklist
         ?.split(/[\n,;]/)
         .map(e => e.toString().trim().toLowerCase())
         .filter(e => e.length);

      const thumbsSelectors = [

         'ytd-video-renderer',
         'ytm-compact-video-renderer',

      ]
         .join(',');

      if (NOVA.isMobile) {

         NOVA.watchElements({
            selectors: ['.subhead > [class*="media-item-byline"]:not(:empty)'],
            attr_mark: 'nova-thumb-channel-filtered',
            callback: channel_name => {
               keywords.forEach(keyword => {
                  if (channel_name.textContent.trim().toLowerCase().includes(keyword)
                     && (thumb = channel_name.closest(thumbsSelectors))
                  ) {
                     thumb.remove();
                  }
               });
            }
         });
      }
      else {
         document.addEventListener('yt-action', evt => {

            if ([
               'yt-append-continuation-items-action',

               'yt-service-request',

            ]
               .includes(evt.detail?.actionName)
            ) {
               document.body.querySelectorAll(
                  '#channel-name',

               )
                  .forEach(channel_name => {
                     keywords.forEach(keyword => {
                        if (channel_name.textContent.trim().toLowerCase().includes(keyword)
                           && (thumb = channel_name.closest(thumbsSelectors))
                        ) {
                           thumb.remove();
                        }
                     });
                  });
            }
         });
      }

   },
});
window.nova_plugins.push({
   id: 'scrollbar-hide',
   title: 'Hide scrollbar',
   run_on_pages: 'all, -embed, -mobile',

   section: 'other',
   _runtime: user_settings => {

      if (user_settings.scrollbar_hide_livechat && NOVA.currentPage == 'live_chat') {
         return NOVA.css.push(
            `*,
            #item-scroller {
               -ms-overflow-style: none; 
               scrollbar-width: none; 
            }
            *::-webkit-scrollbar,
            #item-scroller::-webkit-scrollbar {
               display: none; 
            }`);
      }

      if (user_settings.scrollbar_hide) {
         const HIDE_SCROLL_ATTR = 'nova-scrollbar-hide';

         NOVA.css.push(
            `html[${HIDE_SCROLL_ATTR}] body {
               overflow: hidden;
            }`);

         NOVA.runOnPageInitOrTransition(() => {
            let hasAttr = document.documentElement.hasAttribute(HIDE_SCROLL_ATTR);
            if ((NOVA.currentPage == 'watch') && !hasAttr) {

               document.documentElement.toggleAttribute(HIDE_SCROLL_ATTR);
            }
            else if ((NOVA.currentPage != 'watch') && hasAttr) {
               document.documentElement.removeAttribute(HIDE_SCROLL_ATTR);
            }
         });
      }

   },
});
window.nova_plugins.push({
   id: 'shorts-redirect',
   title: 'Redirect Shorts to regular (watch) URLs',
   run_on_pages: 'results, feed, channel, shorts',

   section: 'other',
   _runtime: user_settings => {

      NOVA.runOnPageInitOrTransition(redirectPageToNormal);

      function redirectPageToNormal() {
         if ('shorts' == NOVA.currentPage) {
            return location.href = location.href.replace('shorts/', 'watch?v=');

         }
      }
      if (user_settings.shorts_thumbnails_time
         && !user_settings['shorts_disable']
      ) {
         document.addEventListener('yt-action', evt => {

            if ([
               'yt-append-continuation-items-action',
               'ytd-update-grid-state-action',
               'yt-service-request',
               'ytd-rich-item-index-update-action',
            ]
               .includes(evt.detail?.actionName)
            ) {
               if (NOVA.currentPage == 'channel' && !['shorts'].includes(NOVA.channelTab)) return;

               patchThumbShort();
            }
         });
      }

      const

         linkQueryPatch = '&list=RDSH';
      function patchThumbShort() {
         document.body.querySelectorAll(`a[href*="/shorts/"]:not([href$="${linkQueryPatch}"])`)
            .forEach(link => {
               link.href += linkQueryPatch;
            });
      }
   },
});
window.nova_plugins.push({
   id: 'channel-trailer-stop-preload',

   title: 'Stop play channel trailer',
   run_on_pages: 'channel, -mobile',
   restart_on_location_change: true,
   section: 'channel',
   _runtime: user_settings => {
      NOVA.waitElement('#c4-player')
         .then(player => player.stopVideo());

   },
});
window.nova_plugins.push({
   id: 'thumbnails-title-normalize',
   title: 'Decapitalize thumbnails title',
   run_on_pages: 'home, feed, channel, watch',

   section: 'other',
   _runtime: user_settings => {
      const
         VIDEO_TITLE_SELECTOR = [
            '#video-title',
            'a > [class*="media-item-headline"]',
         ]
            .map(i => i + ':not(:empty)'),
         MAX_CAPS_LETTERS = +user_settings.thumbnails_title_normalize_smart_max_words || 2,
         ATTR_MARK = 'nova-thumb-title-normalized',
         clearOfEmoji = str => str.replace(/[^\p{L}\p{N}\p{P}\p{Z}{\^\$}]/gu, ' ').replace(/\s{2,}/g, ' ');

      if (user_settings.thumbnails_title_normalize_show_full) {
         NOVA.css.push(
            VIDEO_TITLE_SELECTOR.join(',') + `{
               display: block !important;
               max-height: unset !important;
            }`);
      }
      const UpperCaseLetterRegex = new RegExp("([\-0-9A-ZÀ-ÖØ-ÞĀĂĄĆĈĊČĎĐĒĔĖĘĚĜĞĠĢĤĦĨĪĬĮİĲĴĶĹĻĽĿŁŃŅŇŊŌŎŐŒŔŖŘŚŜŞŠŢŤŦŨŪŬŮŰŲŴŶŸ-ŹŻŽƁ-ƂƄƆ-ƇƉ-ƋƎ-ƑƓ-ƔƖ-ƘƜ-ƝƟ-ƠƢƤƦ-ƧƩƬƮ-ƯƱ-ƳƵƷ-ƸƼǄǇǊǍǏǑǓǕǗǙǛǞǠǢǤǦǨǪǬǮǱǴǶ-ǸǺǼǾȀȂȄȆȈȊȌȎȐȒȔȖȘȚȜȞȠȢȤȦȨȪȬȮȰȲȺ-ȻȽ-ȾɁɃ-ɆɈɊɌɎͰͲͶΆΈ-ΊΌΎ-ΏΑ-ΡΣ-ΫϏϒ-ϔϘϚϜϞϠϢϤϦϨϪϬϮϴϷϹ-ϺϽ-ЯѠѢѤѦѨѪѬѮѰѲѴѶѸѺѼѾҀҊҌҎҐҒҔҖҘҚҜҞҠҢҤҦҨҪҬҮҰҲҴҶҸҺҼҾӀ-ӁӃӅӇӉӋӍӐӒӔӖӘӚӜӞӠӢӤӦӨӪӬӮӰӲӴӶӸӺӼӾԀԂԄԆԈԊԌԎԐԒԔԖԘԚԜԞԠԢԱ-Ֆ֊־٠-٩۰-۹߀-߉०-९০-৯੦-੯૦-૯୦-୯௦-௯౦-౯೦-೯൦-൯๐-๙໐-໙༠-༩၀-၉႐-႙Ⴀ-Ⴥ០-៩᠆᠐-᠙᥆-᥏᧐-᧙᭐-᭙᮰-᮹᱀-᱉᱐-᱙ḀḂḄḆḈḊḌḎḐḒḔḖḘḚḜḞḠḢḤḦḨḪḬḮḰḲḴḶḸḺḼḾṀṂṄṆṈṊṌṎṐṒṔṖṘṚṜṞṠṢṤṦṨṪṬṮṰṲṴṶṸṺṼṾẀẂẄẆẈẊẌẎẐẒẔẞẠẢẤẦẨẪẬẮẰẲẴẶẸẺẼẾỀỂỄỆỈỊỌỎỐỒỔỖỘỚỜỞỠỢỤỦỨỪỬỮỰỲỴỶỸỺỼỾἈ-ἏἘ-ἝἨ-ἯἸ-ἿὈ-ὍὙὛὝὟὨ-ὯᾸ-ΆῈ-ΉῘ-ΊῨ-ῬῸ-Ώ‐-―ℂℇℋ-ℍℐ-ℒℕℙ-ℝℤΩℨK-ℭℰ-ℳℾ-ℿⅅↃⰀ-ⰮⱠⱢ-ⱤⱧⱩⱫⱭ-ⱯⱲⱵⲀⲂⲄⲆⲈⲊⲌⲎⲐⲒⲔⲖⲘⲚⲜⲞⲠⲢⲤⲦⲨⲪⲬⲮⲰⲲⲴⲶⲸⲺⲼⲾⳀⳂⳄⳆⳈⳊⳌⳎⳐⳒⳔⳖⳘⳚⳜⳞⳠⳢ⸗⸚〜〰゠꘠-꘩ꙀꙂꙄꙆꙈꙊꙌꙎꙐꙒꙔꙖꙘꙚꙜꙞꙢꙤꙦꙨꙪꙬꚀꚂꚄꚆꚈꚊꚌꚎꚐꚒꚔꚖꜢꜤꜦꜨꜪꜬꜮꜲꜴꜶꜸꜺꜼꜾꝀꝂꝄꝆꝈꝊꝌꝎꝐꝒꝔꝖꝘꝚꝜꝞꝠꝢꝤꝦꝨꝪꝬꝮꝹꝻꝽ-ꝾꞀꞂꞄꞆꞋ꣐-꣙꤀-꤉꩐-꩙︱-︲﹘﹣－０-９Ａ-Ｚ]|\ud801[\udc00-\udc27\udca0-\udca9]|\ud835[\udc00-\udc19\udc34-\udc4d\udc68-\udc81\udc9c\udc9e-\udc9f\udca2\udca5-\udca6\udca9-\udcac\udcae-\udcb5\udcd0-\udce9\udd04-\udd05\udd07-\udd0a\udd0d-\udd14\udd16-\udd1c\udd38-\udd39\udd3b-\udd3e\udd40-\udd44\udd46\udd4a-\udd50\udd6c-\udd85\udda0-\uddb9\uddd4-\udded\ude08-\ude21\ude3c-\ude55\ude70-\ude89\udea8-\udec0\udee2-\udefa\udf1c-\udf34\udf56-\udf6e\udf90-\udfa8\udfca\udfce-\udfff]){2,}", 'g');
      NOVA.css.push({
         'text-transform': 'uppercase',

      }, VIDEO_TITLE_SELECTOR.map(e => `${e}[${ATTR_MARK}]::first-letter`), 'important');

      NOVA.watchElements({
         selectors: VIDEO_TITLE_SELECTOR,
         attr_mark: ATTR_MARK,
         callback: videoTitleEl => {

            if (NOVA.currentPage == 'results') return;
            let countCaps = 0;
            if (user_settings.thumbnails_title_clear_emoji) {
               videoTitleEl.textContent = clearOfEmoji(videoTitleEl.textContent).trim();
            }

            const normalizedText = videoTitleEl.textContent.replace(UpperCaseLetterRegex, match => {

               ++countCaps;

               return /\d/.test(match) ? match : match.toLowerCase();
            });

            if (countCaps > MAX_CAPS_LETTERS
               || (countCaps > 1 && normalizedText.split(/\s+/).length === countCaps)
            ) {
               videoTitleEl.textContent = normalizedText;

            }
         }
      });
      document.addEventListener('yt-action', evt => {

         if (evt.detail?.actionName == 'yt-chip-cloud-chip-select-action') {
            window.addEventListener('transitionend', restoreTitle, { capture: true, once: true });
         }
      });

      function restoreTitle() {
         const selectorOldTitle = '#video-title-link[title]';
         if (NOVA.channelTab == 'videos') {
            document.body.querySelectorAll(`${selectorOldTitle} ${VIDEO_TITLE_SELECTOR}[${ATTR_MARK}]`)

               .forEach(el => {
                  if (oldTitle = el.closest(selectorOldTitle)?.title) {
                     el.textContent = oldTitle;
                     el.removeAttribute(ATTR_MARK);
                  }
               });
         }
      }

   },
});
window.nova_plugins.push({
   id: 'miniplayer-disable',
   title: 'Disable miniplayer',
   run_on_pages: 'watch, -mobile',
   section: 'other',
   _runtime: user_settings => {
      NOVA.css.push(
         `.ytp-right-controls .ytp-miniplayer-button {
            display: none !important;
         }`);
      document.addEventListener('yt-action', evt => {
         if (NOVA.currentPage != 'watch' && evt.detail?.actionName.includes('miniplayer')) {
            document.body.querySelector('#movie_player .ytp-miniplayer-ui button.ytp-miniplayer-close-button')
               ?.click();
         }
      });
   },
});
window.nova_plugins.push({
   id: 'pause-background-tab',
   title: 'Only one player instance playing',
   run_on_pages: 'watch, embed',
   section: 'player',
   _runtime: user_settings => {
      if (location.hostname.includes('youtube-nocookie.com')) location.hostname = 'youtube.com';

      const
         storeName = 'playngInstanceIDTab',
         instanceID = Math.random(),
         removeStorage = () => localStorage.removeItem(storeName);

      NOVA.waitElement('video')
         .then(video => {

            video.addEventListener('playing', () => localStorage.setItem(storeName, instanceID));

            ['pause', 'suspend', 'ended'].forEach(evt => video.addEventListener(evt, removeStorage));

            window.addEventListener('beforeunload', removeStorage);
            if (user_settings.pause_background_tab_autoplay_onfocus) {
               window.addEventListener('focus', () => {

                  if (!localStorage.hasOwnProperty(storeName)

                     && ['UNSTARTED', 'PAUSED'].includes(NOVA.getPlayerState())
                  ) {

                     video.play();
                  }
               });
            }

            window.addEventListener('storage', store => {
               if ((document.visibilityState == 'hidden' || NOVA.currentPage == 'embed')
                  && store.key === storeName && store.storageArea === localStorage
                  && localStorage.hasOwnProperty(storeName) && localStorage.getItem(storeName) !== instanceID
                  && 'PLAYING' == NOVA.getPlayerState()
               ) {

                  video.pause();
               }
            });

            if (user_settings.pause_background_tab_autopause_unfocus) {
               window.addEventListener('blur', () => {
                  if ('PLAYING' == NOVA.getPlayerState()) {
                     video.pause();
                  }
               });
            }

         });
   },
});
window.nova_plugins.push({
   id: 'player-loop',
   title: 'Add repeat (loop) playback button',

   run_on_pages: 'watch',
   section: 'player',
   _runtime: user_settings => {
      NOVA.waitElement('.ytp-left-controls .ytp-play-button')
         .then(container => {
            const
               SELECTOR_CLASS = 'nova-right-custom-button',
               btn = document.createElement('button');
            btn.className = `ytp-button ${SELECTOR_CLASS}`;
            btn.style.opacity = .5;
            btn.style.minWidth = getComputedStyle(container).width || '48px';
            btn.title = 'Repeat';

            btn.innerHTML =
               `<svg viewBox="-6 -6 36 36" height="100%" width="100%">
                  <g fill="currentColor">
                     <path d="M 7 7 L 17 7 L 17 10 L 21 6 L 17 2 L 17 5 L 5 5 L 5 11 L 7 11 L 7 7 Z M 7.06 17 L 7 14 L 3 18 L 7 22 L 7 19 L 19 19 L 19 13 L 17 13 L 17 17 L 7.06 17 Z"/>
                  </g>
               </svg>`;
            btn.addEventListener('click', () => {
               if (!NOVA.videoElement) return console.error('btn > videoElement empty:', NOVA.videoElement);

               NOVA.videoElement.loop = !NOVA.videoElement.loop;

               if (movie_player.classList.contains('ad-showing')) NOVA.videoElement.removeAttribute('loop');

               btn.style.opacity = NOVA.videoElement.hasAttribute('loop') ? 1 : .5;
            });

            container.after(btn);
            if (user_settings.player_loop_in_music) {
               NOVA.runOnPageInitOrTransition(() => {
                  if (NOVA.currentPage == 'watch') {
                     btn.style.display = NOVA.isMusic() ? '' : 'none';
                  }
               });
            }
         });
   },
});
window.nova_plugins.push({
   id: 'page-title-time',
   title: 'Show time in tab title',
   run_on_pages: 'watch',
   section: 'player',
   _runtime: user_settings => {
      NOVA.waitElement('video')
         .then(video => {

            document.addEventListener('yt-navigate-start', () => pageTitle.backup = null);

            video.addEventListener('playing', pageTitle.save.bind(pageTitle));

            video.addEventListener('timeupdate', () => pageTitle.update(video));

            video.addEventListener('pause', () => pageTitle.restore(video));
            video.addEventListener('ended', () => pageTitle.restore(video));
         });
      const pageTitle = {
         strSplit: ' | ',
         saveCheck() {
            return (result = (this.backup || document.title).includes(this.strSplit))

               ? new RegExp(`^((\\d?\\d:){1,2}\\d{2})(${this.strSplit.replace('|', '\\|')})`, '')
                  .test(document.title)
               : result;
         },

         save() {
            if (this.backup
               || movie_player.getVideoData().isLive
               || movie_player.classList.contains('ad-showing')
               || this.saveCheck()
            ) {
               return;
            }

            this.backup = movie_player.getVideoData().title;

         },

         update(video = NOVA.videoElement) {
            if (!this.backup) return;

            let newTitleArr = [];

            switch (movie_player.getVideoData().isLive ? 'current' : user_settings.page_title_time_mode) {
               case 'current':
                  newTitleArr = [video.currentTime];
                  break;

               case 'current-duration':
                  if (!isNaN(video.duration)) {
                     newTitleArr = [video.currentTime, ' / ', video.duration];
                  }
                  break;
               default:
                  if (!isNaN(video.duration)) {
                     newTitleArr = [video.duration - video.currentTime];
                  }
            }
            newTitleArr = newTitleArr
               .map(t => (typeof t === 'string') ? t : NOVA.timeFormatTo.HMS.digit(t / video.playbackRate))
               .join('');

            this.set([newTitleArr, this.backup]);
         },

         restore(video = NOVA.videoElement) {
            if (!this.backup) return;

            this.set([movie_player.getVideoData().isLive && video.currentTime, this.backup]);
         },

         set(arr) {
            document.title = arr
               .filter(Boolean)
               .join(this.strSplit);
         },
      };

   },
});
window.nova_plugins.push({
   id: 'player-float-progress-bar',
   title: 'Float player progress bar',
   run_on_pages: 'watch, embed, -mobile',
   section: 'player',
   _runtime: user_settings => {
      if (NOVA.currentPage == 'embed' && window.self.location.href.includes('live_stream')

      ) return;

      const
         SELECTOR_ID = 'nova-player-float-progress-bar',
         SELECTOR = '#' + SELECTOR_ID,
         CHAPTERS_MARK_WIDTH_PX = '2px';

      NOVA.waitElement('#movie_player video')
         .then(async video => {
            const

               chromeBtn_zIndex = await NOVA.waitUntil(() => (chromeBtn = document.body.querySelector('.ytp-chrome-bottom')) && getComputedStyle(chromeBtn)['z-index']),
               container = renderFloatBar(chromeBtn_zIndex),
               bufferEl = document.getElementById(`${SELECTOR_ID}-buffer`),
               progressEl = document.getElementById(`${SELECTOR_ID}-progress`);

            renderChapters.init(video);
            video.addEventListener('loadeddata', resetBar);
            video.addEventListener('timeupdate', function () {
               if (notInteractiveToRender()) return;
               if (!isNaN(this.duration)) {
                  progressEl.style.transform = `scaleX(${this.currentTime / this.duration})`;
               }
            });
            video.addEventListener('progress', renderBuffer.bind(video));
            video.addEventListener('seeking', renderBuffer.bind(video));

            function renderBuffer() {
               if (notInteractiveToRender()) return;
               if ((totalDuration = movie_player.getDuration()) && !isNaN(totalDuration)) {
                  bufferEl.style.transform = `scaleX(${movie_player.getVideoLoadedFraction()})`;
               }
            }
            function resetBar() {

               container.style.display = movie_player.getVideoData().isLive ? 'none' : 'initial';
               container.classList.remove('transition');
               bufferEl.style.transform = 'scaleX(0)';
               progressEl.style.transform = 'scaleX(0)';
               container.classList.add('transition');

               renderChapters.init(video);
            }

            function notInteractiveToRender() {
               return (document.visibilityState == 'hidden'
                  || movie_player.getVideoData().isLive

               );
            }

         });

      function renderFloatBar(z_index = 60) {
         return document.getElementById(SELECTOR_ID) || (function () {
            movie_player?.insertAdjacentHTML('beforeend',
               `<div id="${SELECTOR_ID}" class="transition">
                  <div class="container">
                     <div id="${SELECTOR_ID}-buffer" class="ytp-load-progress"></div>
                     <div id="${SELECTOR_ID}-progress" class="ytp-swatch-background-color"></div>
                  </div>
                  <div id="${SELECTOR_ID}-chapters"></div>
               </div>`);
            NOVA.css.push(
               `[id|=${SELECTOR_ID}] {
                  position: absolute;
                  bottom: 0;
               }

               ${SELECTOR} {
                  --opacity: ${+user_settings.player_float_progress_bar_opacity || .7};
                  --height: ${+user_settings.player_float_progress_bar_height || 3}px;
                  --bg-color: ${getComputedStyle(document.body.querySelector('.ytp-progress-list'))['background-color'] || 'rgba(255,255,255,.2)'};
                  --zindex: ${z_index};

                  opacity: var(--opacity)
                  z-index: var(--zindex);
                  background-color: var(--bg-color);
                  width: 100%;
                  visibility: hidden;
               }

               
               .ytp-autohide ${SELECTOR} {
                  visibility: visible;
               }

               

               ${SELECTOR}.transition [id|=${SELECTOR_ID}] {
                  transition: transform .2s linear;
               }

               ${SELECTOR}-progress, ${SELECTOR}-buffer {
                  width: 100%;
                  height: var(--height);
                  transform-origin: 0 0;
                  transform: scaleX(0);
               }

               ${SELECTOR}-progress {
                  z-index: calc(var(--zindex) + 1);
               }

               

               ${SELECTOR}-chapters {
                  position: relative;
                  width: 100%;
                  display: flex;
                  justify-content: flex-end;
               }

               ${SELECTOR}-chapters span {
                  height: var(--height);
                  z-index:  calc(var(--zindex) + 1);
                  border-left: ${CHAPTERS_MARK_WIDTH_PX} solid rgba(255,255,255,.7);
                  
                  margin-left: -${CHAPTERS_MARK_WIDTH_PX};
               }`);

            return document.getElementById(SELECTOR_ID);
         })();
      }
      const renderChapters = {
         async init(vid) {
            if (NOVA.currentPage == 'watch' && !(vid instanceof HTMLElement)) {
               return console.error('vid not HTMLElement:', chaptersContainer);
            }

            await NOVA.waitUntil(() => !isNaN(vid.duration), 1000);

            switch (NOVA.currentPage) {
               case 'watch':
                  this.from_description(vid.duration);
                  break;
               case 'embed':

                  await NOVA.waitUntil(() => (
                     chaptersContainer = document.body.querySelector('.ytp-chapters-container'))
                     && chaptersContainer?.children.length > 1
                     , 1000);

                  (
                     this.renderChaptersMarks(vid.duration)
                     || this.from_div(chaptersContainer)
                  );
                  break;
            }
         },

         from_description(duration = required()) {
            if (Math.sign(duration) !== 1) return console.error('duration not positive number:', duration);
            const selectorTimestampLink = 'a[href*="&t="]';
            NOVA.waitElement(`ytd-watch-metadata #description.ytd-watch-metadata ${selectorTimestampLink}`)
               .then(() => this.renderChaptersMarks(duration));
            NOVA.waitElement(`#comments #comment #comment-content ${selectorTimestampLink}`)
               .then(() => this.renderChaptersMarks(duration));
         },

         from_div(chaptersContainer = required()) {
            if (!(chaptersContainer instanceof HTMLElement)) return console.error('container not HTMLElement:', chaptersContainer);
            const
               progressContainerWidth = parseInt(getComputedStyle(chaptersContainer).width, 10),
               chaptersOut = document.getElementById(`${SELECTOR_ID}-chapters`);

            for (const chapter of chaptersContainer.children) {
               const
                  newChapter = document.createElement('span'),
                  { width, marginLeft, marginRight } = getComputedStyle(chapter),
                  chapterMargin = parseInt(marginLeft, 10) + parseInt(marginRight, 10);
               newChapter.style.width = (((parseInt(width, 10) + chapterMargin) / progressContainerWidth) * 100) + '%';

               chaptersOut.append(newChapter);
            }
         },

         renderChaptersMarks(duration) {

            if (isNaN(duration)) return console.error('duration isNaN:', duration);

            if (chaptersContainer = document.getElementById(`${SELECTOR_ID}-chapters`)) {
               chaptersContainer.innerHTML = '';
            }
            const chapterList = NOVA.getChapterList(duration);

            chapterList
               ?.forEach((chapter, i, chapters_list) => {

                  const newChapter = document.createElement('span');
                  const nextChapterSec = chapters_list[i + 1]?.sec || duration;

                  newChapter.style.width = ((nextChapterSec - chapter.sec) / duration) * 100 + '%';
                  if (chapter.title) newChapter.title = chapter.title;
                  newChapter.setAttribute('time', chapter.time);

                  chaptersContainer.append(newChapter);
               });
            return chapterList;
         },
      };

   },
});
window.nova_plugins.push({
   id: 'rate-wheel',
   title: 'Playback speed control',
   run_on_pages: 'watch, embed',
   section: 'player',
   _runtime: user_settings => {
      NOVA.waitElement('video')
         .then(video => {
            const sliderContainer = renderSlider.apply(video);
            video.addEventListener('ratechange', function () {

               NOVA.bezelTrigger(this.playbackRate + 'x');
               if (Object.keys(sliderContainer).length) {
                  sliderContainer.slider.value = this.playbackRate;
                  sliderContainer.sliderLabel.textContent = `Speed (${this.playbackRate})`;
                  sliderContainer.sliderCheckbox.checked = (this.playbackRate === 1) ? false : true;
               }
            });

            setDefaultRate();

            video.addEventListener('loadeddata', setDefaultRate);

            if (Object.keys(sliderContainer).length) {
               sliderContainer.slider.addEventListener('input', ({ target }) => playerRate.set(target.value));
               sliderContainer.slider.addEventListener('change', ({ target }) => playerRate.set(target.value));
               sliderContainer.slider.addEventListener('wheel', evt => {
                  evt.preventDefault();
                  const rate = playerRate.adjust(+user_settings.rate_step * Math.sign(evt.wheelDelta));

               });
               sliderContainer.sliderCheckbox.addEventListener('change', ({ target }) => {
                  target.checked || playerRate.set(1)
               });
            }

            NOVA.runOnPageInitOrTransition(() => (NOVA.currentPage == 'watch') && expandAvailableRatesMenu());
         });
      if (user_settings.rate_hotkey) {
         NOVA.waitElement('.html5-video-container')
            .then(container => {
               container.addEventListener('wheel', evt => {
                  evt.preventDefault();

                  if (evt[user_settings.rate_hotkey]
                     || (user_settings.rate_hotkey == 'none' && !evt.ctrlKey && !evt.altKey && !evt.shiftKey)) {

                     const rate = playerRate.adjust(+user_settings.rate_step * Math.sign(evt.wheelDelta));

                  }
               });
            });
      }
      if (+user_settings.rate_default !== 1 && user_settings.rate_default_apply_music) {

         NOVA.waitElement('#upload-info #channel-name .badge-style-type-verified-artist')
            .then(icon => playerRate.set(1));

         NOVA.waitElement('#upload-info #channel-name a[href]')
            .then(channelName => {

               if (/(VEVO|Topic|Records|AMV)$/.test(channelName.textContent)
                  || channelName.textContent.toUpperCase().includes('MUSIC')
               ) {
                  playerRate.set(1);
               }
            });
      }
      const playerRate = {
         testDefault: rate => (+rate % .25) === 0
            && +rate <= 2
            && +user_settings.rate_default <= 2
            && (typeof movie_player !== 'undefined' && movie_player.hasOwnProperty('getPlaybackRate')),

         async set(level = 1) {
            this.log('set', ...arguments);
            if (this.testDefault(level)) {
               this.log('set:default');
               movie_player.setPlaybackRate(+level) && this.saveInSession(level);
            }
            else {
               this.log('set:html5');
               NOVA.videoElement = await NOVA.waitElement('video');

               if (NOVA.videoElement) {
                  NOVA.videoElement.playbackRate = +level;
                  this.clearInSession();
               }
            }
         },

         adjust(rate_step = required()) {
            this.log('adjust', ...arguments);
            return this.testDefault(rate_step) ? this.default(+rate_step) : this.html5(+rate_step);
         },

         default(playback_rate = required()) {
            this.log('default', ...arguments);
            const playbackRate = movie_player.getPlaybackRate();
            const inRange = step => {
               const setRateStep = playbackRate + step;
               return (.1 <= setRateStep && setRateStep <= 2) && +setRateStep.toFixed(2);
            };
            const newRate = inRange(+playback_rate);

            if (newRate && newRate != playbackRate) {
               movie_player.setPlaybackRate(newRate);

               if (newRate === movie_player.getPlaybackRate()) {
                  this.saveInSession(newRate);
               }
               else {
                  console.error('playerRate:default different: %s!=%s', newRate, movie_player.getPlaybackRate());
               }
            }
            this.log('default return', newRate);
            return newRate === movie_player.getPlaybackRate() && newRate;
         },

         html5(playback_rate = required()) {
            this.log('html5', ...arguments);
            if (!NOVA.videoElement) return console.error('playerRate > videoElement empty:', NOVA.videoElement);

            const playbackRate = NOVA.videoElement.playbackRate;
            const inRange = step => {
               const setRateStep = playbackRate + step;
               return (.1 <= setRateStep && setRateStep <= 3) && +setRateStep.toFixed(2);
            };
            const newRate = inRange(+playback_rate);

            if (newRate && newRate != playbackRate) {

               NOVA.videoElement.playbackRate = newRate;

               if (newRate === NOVA.videoElement.playbackRate) {
                  this.clearInSession();
               }
               else {
                  console.error('playerRate:html5 different: %s!=%s', newRate, NOVA.videoElement.playbackRate);
               }
            }
            this.log('html5 return', newRate);
            return newRate === NOVA.videoElement.playbackRate && newRate;
         },

         saveInSession(level = required()) {
            try {
               sessionStorage['yt-player-playback-rate'] = JSON.stringify({
                  creation: Date.now(), data: level.toString(),
               })
               this.log('playbackRate save in session:', ...arguments);

            } catch (err) {
               console.warn(`${err.name}: save "rate" in sessionStorage failed. It seems that "Block third-party cookies" is enabled`, err.message);
            }
         },

         clearInSession() {
            const keyName = 'yt-player-playback-rate';
            try {
               sessionStorage.hasOwnProperty(keyName) && sessionStorage.removeItem(keyName);
               this.log('playbackRate save in session:', ...arguments);

            } catch (err) {
               console.warn(`${err.name}: save "rate" in sessionStorage failed. It seems that "Block third-party cookies" is enabled`, err.message);
            }
         },

         log() {
            if (this.DEBUG && arguments.length) {
               console.groupCollapsed(...arguments);
               console.trace();
               console.groupEnd();
            }
         },
      };

      function setDefaultRate() {
         if (+user_settings.rate_default !== 1) {
            const is_music = NOVA.isMusic();

            if (NOVA.videoElement?.playbackRate !== +user_settings.rate_default
               && (!user_settings.rate_default_apply_music || !is_music)
            ) {

               playerRate.set(user_settings.rate_default);
            }

            else if (NOVA.videoElement?.playbackRate !== 1 && is_music) {

               playerRate.set(1);
            }
         }
      }
      function renderSlider() {
         const
            SELECTOR_ID = 'nova-rate-slider-menu',
            SELECTOR = '#' + SELECTOR_ID;

         NOVA.css.push(
            `${SELECTOR} [type="range"] {
               vertical-align: text-bottom;
               margin: '0 5px',
            }

            ${SELECTOR} [type="checkbox"] {
               appearance: none;
               outline: none;
               cursor: pointer;
            }

            ${SELECTOR} [type="checkbox"]:checked {
               background: #f00;
            }

            ${SELECTOR} [type="checkbox"]:checked:after {
               left: 20px;
               background-color: #fff;
            }`);
         const slider = document.createElement('input');
         slider.className = 'ytp-menuitem-slider';
         slider.type = 'range';
         slider.min = +user_settings.rate_step;
         slider.max = Math.max(2, +user_settings.rate_default);
         slider.step = +user_settings.rate_step;
         slider.value = this.playbackRate;
         const sliderIcon = document.createElement('div');
         sliderIcon.className = 'ytp-menuitem-icon';

         const sliderLabel = document.createElement('div');
         sliderLabel.className = 'ytp-menuitem-label';
         sliderLabel.textContent = `Speed (${this.playbackRate})`;

         const sliderCheckbox = document.createElement('input');
         sliderCheckbox.className = 'ytp-menuitem-toggle-checkbox';
         sliderCheckbox.type = 'checkbox';
         sliderCheckbox.title = 'Remember speed';
         const out = {};
         const right = document.createElement('div');
         right.className = 'ytp-menuitem-content';
         out.sliderCheckbox = right.appendChild(sliderCheckbox);
         out.slider = right.appendChild(slider);

         const speedMenu = document.createElement('div');
         speedMenu.className = 'ytp-menuitem';
         speedMenu.id = SELECTOR_ID;
         speedMenu.append(sliderIcon);
         out.sliderLabel = speedMenu.appendChild(sliderLabel);
         speedMenu.append(right);

         document.body.querySelector('.ytp-panel-menu')
            ?.append(speedMenu);

         return out;
      }

      function expandAvailableRatesMenu() {
         if (typeof _yt_player !== 'object') {
            return console.error('expandAvailableRatesMenu > _yt_player is empty', _yt_player);
         }
         let path;

         findPathPlaybackRates(_yt_player);
         setAvailableRates(_yt_player, 0, path.split('.'));

         function findPathPlaybackRates(obj, prep) {
            const setPath = data => (prep ? prep + '.' : '') + data;
            let count = 0;

            for (const p in obj) {
               if ((data = Object.keys(obj)[count]) && obj[data]) {
                  if (data == 'getAvailablePlaybackRates') {
                     path = setPath(data);
                     return path;
                  }

                  if ((objOfObj = obj[data])
                     && obj[p].constructor.name == 'Function'
                     && Object.keys(objOfObj).length
                  ) {
                     let inCount = 0;
                     for (const j in objOfObj) {
                        if (typeof objOfObj !== 'undefined') {

                           findPathPlaybackRates(objOfObj[j], setPath(data) + '.' + Object.keys(objOfObj)[inCount]);
                        }
                        if (path) return path;
                        inCount++;
                     }
                  }
               }
               count++;
            }
         }

         function setAvailableRates(path, idx, arr) {
            if (arr.length - 1 == idx) {
               path[arr[idx]] = () => [.25, .5, .75, 1, 1.25, 1.5, 1.75, 2, 2.25, 2.5, 2.75, 3, 3.25, 3.5, 3.75, 4, 10];
            }
            else {
               setAvailableRates(path[arr[idx]], idx + 1, arr);
            }
         }
      }

   },
});
window.nova_plugins.push({
   id: 'volume-wheel',
   title: 'Volume',
   run_on_pages: 'watch, embed, -mobile',
   section: 'player',
   _runtime: user_settings => {
      NOVA.waitElement('video')
         .then(video => {

            video.addEventListener('volumechange', function () {
               NOVA.bezelTrigger(movie_player.getVolume() + '%');
               playerVolume.buildVolumeSlider();

               if (user_settings.volume_mute_unsave) {
                  playerVolume.saveInSession(movie_player.getVolume());
               }
            });

            if (user_settings.volume_hotkey) {

               document.body.querySelector('.html5-video-container')
                  .addEventListener('wheel', evt => {
                     evt.preventDefault();

                     if (evt[user_settings.volume_hotkey] || (user_settings.volume_hotkey == 'none' && !evt.ctrlKey && !evt.altKey && !evt.shiftKey)) {

                        if (step = +user_settings.volume_step * Math.sign(evt.wheelDelta)) {
                           playerVolume.adjust(step);
                        }
                     }
                  });
            }

            if (+user_settings.volume_level_default) {
               playerVolume.set(+user_settings.volume_level_default);
            }
         });
      const playerVolume = {
         adjust(delta) {
            const level = movie_player?.getVolume() + +delta;
            return user_settings.volume_unlimit ? this.unlimit(level) : this.set(level);
         },

         set(level = 50) {
            if (typeof movie_player === 'undefined' || !movie_player.hasOwnProperty('getVolume')) return console.error('Error getVolume');

            const newLevel = Math.max(0, Math.min(100, +level));
            if (newLevel !== movie_player.getVolume()) {
               movie_player.isMuted() && movie_player.unMute();
               movie_player.setVolume(newLevel);

               if (newLevel === movie_player.getVolume()) {
                  this.saveInSession(newLevel);

               }
               else {
                  console.error('setVolumeLevel error! Different: %s!=%s', newLevel, movie_player.getVolume());
               }
            }
            return newLevel === movie_player.getVolume() && newLevel;
         },
         saveInSession(level = required()) {
            const storageData = {
               creation: Date.now(),
               data: { 'volume': +level, 'muted': (level ? 'false' : 'true') },

            };

            try {
               localStorage['yt-player-volume'] = JSON.stringify(
                  Object.assign({ expiration: Date.now() + 2592e6 }, storageData)
               );
               sessionStorage['yt-player-volume'] = JSON.stringify(storageData);
            } catch (err) {
               console.warn(`${err.name}: save "volume" in sessionStorage failed. It seems that "Block third-party cookies" is enabled`, err.message);
            }
         },

         unlimit(level = 300) {
            if (level > 100) {
               if (!this.audioCtx) {
                  this.audioCtx = new AudioContext();
                  const source = this.audioCtx.createMediaElementSource(NOVA.videoElement);
                  this.node = this.audioCtx.createGain();
                  this.node.gain.value = 1;
                  source.connect(this.node);
                  this.node.connect(this.audioCtx.destination);
               }

               if (this.node.gain.value < 7) this.node.gain.value += 1;

               NOVA.bezelTrigger(movie_player.getVolume() * this.node.gain.value + '%');

            }
            else {
               if (this.audioCtx && this.node.gain.value !== 1) {
                  this.node.gain.value = 1;
               }
               this.set(level);
            }

         },

         buildVolumeSlider(timeout_ms = 800) {
            if (volumeArea = movie_player?.querySelector('.ytp-volume-area')) {

               if (typeof this.showTimeout === 'number') clearTimeout(this.showTimeout);

               volumeArea.dispatchEvent(new Event('mouseover', { bubbles: true }));

               this.showTimeout = setTimeout(() =>
                  volumeArea.dispatchEvent(new Event('mouseout', { bubbles: true }))
                  , timeout_ms);

               insertToHTML({
                  'text': Math.round(movie_player.getVolume()),
                  'container': volumeArea,
               });
            }

            function insertToHTML({ text = '', container = required() }) {

               if (!(container instanceof HTMLElement)) return console.error('container not HTMLElement:', container);
               const SELECTOR_ID = 'nova-volume-text';

               (document.getElementById(SELECTOR_ID) || (function () {
                  const SELECTOR = '#' + SELECTOR_ID;

                  NOVA.css.push(`
                     ${SELECTOR} {
                        display: none;
                        text-indent: 2px;
                        font-size: 110%;
                        text-shadow: 0 0 2px rgba(0, 0, 0, 0.5);
                        cursor: default;
                     }
                     ${SELECTOR}:after { content: '%'; }

                     .ytp-volume-control-hover:not([aria-valuenow="0"])+${SELECTOR} {
                        display: block;
                     }`)
                  const el = document.createElement('span');
                  el.id = SELECTOR_ID;
                  container.insertAdjacentElement('beforeend', el);
                  return el;
               })())
                  .textContent = text;

               container.title = `${text} %`;
            }
         }
      };

   },
});
window.nova_plugins.push({
   id: 'player-progress-bar-color',
   title: 'Player progress bar color',
   run_on_pages: 'watch, embed, -mobile',
   section: 'player',

   _runtime: user_settings => {
      NOVA.css.push(
         `.ytp-swatch-background-color {
            background-color: ${user_settings.player_progress_bar_color || '#f00'} !important;
         }`);

   },
});
window.nova_plugins.push({
   id: 'player-indicator',
   title: 'Replace HUD (bezel)',
   run_on_pages: 'watch, embed, -mobile',
   section: 'player',
   _runtime: user_settings => {
      const
         SELECTOR_ID = 'nova-player-indicator-info',
         COLOR_HUD = user_settings.player_indicator_color || '#ff0000';

      NOVA.waitElement('video')
         .then(video => {

            video.addEventListener('volumechange', function () {

               HUD.set({
                  'pt': Math.round(movie_player.getVolume()),
                  'suffix': '%',

               });
            });

            video.addEventListener('ratechange', () => HUD.set({
               'pt': video.playbackRate,
               'suffix': 'x',

            }));
         });
      NOVA.waitElement('.ytp-bezel-text')
         .then(target => {
            new MutationObserver(mutations => {
               let timeout_ms;
               for (const mutation of mutations) {

                  if (target.textContent) {
                     if (!target.textContent.startsWith('+') && target.textContent.includes(' • ')) {
                        timeout_ms = 1800;

                     }
                     HUD.set({
                        'pt': target.textContent,

                        'timeout_ms': timeout_ms,
                     });
                     break;
                  }
               }
            })
               .observe(target, { childList: true });
         });

      const HUD = {
         get() {
            return this.container || this.create();
         },
         create() {
            NOVA.css.push(
               `.ytp-bezel-text-wrapper,
               .ytp-doubletap-ui-legacy.ytp-time-seeking,
               
               .ytp-chapter-seek {
                  display:none !important;
               }`);

            NOVA.css.push(
               `#${SELECTOR_ID} {
                  --color: #fff;
                  --bg-color: rgba(0,0,0,0.3);
                  --zindex: ${getComputedStyle(document.body.querySelector('.ytp-chrome-top'))['z-index'] || 60};

                  position: absolute;
                  right: 0;
                  z-index: calc(var(--zindex) + 1);
                  margin: 0 auto;
                  text-align: center;
                  opacity: 0;
                  background-color: var(--bg-color);
                  color: var(--color);
               }`);

            movie_player.insertAdjacentHTML('beforeend', `<div id="${SELECTOR_ID}"><span></span></div>`);

            this.container = document.getElementById(SELECTOR_ID);
            this.hudSpan = this.container.querySelector('span');
            switch (user_settings.player_indicator_type) {
               case 'bar-center':
                  Object.assign(this.container.style, {
                     left: 0,
                     bottom: '20%',
                     width: '30%',
                     'font-size': '1.2em',
                  });
                  Object.assign(this.hudSpan.style, {
                     'background-color': COLOR_HUD,
                     transition: 'width 100ms ease-out 0s',
                     display: 'inline-block',
                  });
                  break;

               case 'bar-vertical':
                  Object.assign(this.container.style, {
                     top: 0,
                     height: '100%',
                     width: '25px',
                     'font-size': '1.2em',
                  });
                  Object.assign(this.hudSpan.style, {
                     position: 'absolute',
                     bottom: 0,
                     right: 0,
                     'background-color': COLOR_HUD,
                     transition: 'height 100ms ease-out 0s',
                     display: 'inline-block',
                     width: '100%',
                     'font-weight': 'bold',
                  });
                  break;
               default:
                  Object.assign(this.container.style, {
                     top: 0,
                     width: '100%',
                     padding: '.2em',
                     'font-size': '1.55em',
                  });
            }
            return this.container;
         },

         set({ pt = 100, suffix = '', timeout_ms = 800 }) {

            if (typeof this.fateNovaHUD === 'number') clearTimeout(this.fateNovaHUD);

            let hudContainer = this.get();
            const text = pt + suffix;
            if (suffix == 'x') {
               const maxPercent = (+user_settings.rate_step % .25) === 0 ? 2 : 3;
               pt = (+pt / maxPercent) * 100;
            }
            pt = Math.round(pt);

            switch (user_settings.player_indicator_type) {
               case 'bar-center':
                  this.hudSpan.style.width = pt + '%';
                  this.hudSpan.textContent = text;
                  break;

               case 'bar-vertical':
                  this.hudSpan.style.height = pt + '%';
                  this.hudSpan.textContent = text;
                  break;

               case 'bar-top':
                  hudContainer.style.background = `linear-gradient(to right, ${COLOR_HUD}50 ${pt}%, rgba(0,0,0,.8) ${pt}%)`;
                  this.hudSpan.style.width = pt + '%';
                  this.hudSpan.textContent = text;
                  break;
               default:
                  this.hudSpan.textContent = text;
            }

            hudContainer.style.transition = 'none';
            hudContainer.style.opacity = 1;
            this.fateNovaHUD = setTimeout(() => {
               hudContainer.style.transition = 'opacity 200ms ease-in';
               hudContainer.style.opacity = null;

            }, timeout_ms); //total 1s = 800ms + 200ms(hudContainer.style.transition)
         }
      };

   },
});
window.nova_plugins.push({
   id: 'disable-player-sleep-mode',
   title: 'Disable the "Continue watching?" popup',
   run_on_pages: 'watch, -mobile',
   section: 'player',
   _runtime: user_settings => {
      window.setInterval(() => {
         if (document.visibilityState == 'hidden') {

            document.dispatchEvent(

               new KeyboardEvent('keyup', { bubbles: true, cancelable: true, keyCode: 143, which: 143 })
            );
         }
      }, 1000 * 60 * 5);
   },
});
window.nova_plugins.push({
   id: 'video-autopause',
   title: 'Video auto pause',
   run_on_pages: 'watch, embed',
   restart_on_location_change: true,
   section: 'player',
   _runtime: user_settings => {
      if (user_settings['video-stop-preload'] && !user_settings.stop_preload_embed) return;

      if (user_settings.video_autopause_embed && NOVA.currentPage != 'embed') return;
      NOVA.waitElement('#movie_player video')
         .then(video => {
            if (user_settings.video_autopause_ignore_live && movie_player.getVideoData().isLive) return;

            forceVideoPause.apply(video);

         });

      function forceVideoPause() {
         if (user_settings.video_autopause_ignore_playlist && location.search.includes('list=')) return;
         this.pause();

         const forceHoldPause = setInterval(() => this.paused || this.pause(), 200);
         document.addEventListener('click', stopForceHoldPause);
         document.addEventListener('keyup', keyupSpace);

         function stopForceHoldPause() {
            if (movie_player.contains(document.activeElement)) {
               clearInterval(forceHoldPause);
               document.removeEventListener('keyup', keyupSpace);
               document.removeEventListener('click', stopForceHoldPause);
            }
         }

         function keyupSpace(evt) {

            switch (evt.code) {
               case 'Space':
                  stopForceHoldPause()
                  break;
            }
         }
      }

   },
});
window.nova_plugins.push({
   id: 'player-fullscreen-mode',

   title: 'Auto fullscreen on playback',
   run_on_pages: 'watch, embed',
   section: 'player',
   _runtime: user_settings => {
      if (NOVA.currentPage == 'embed' && (window.self === window.top)) return;

      if (user_settings.player_fullscreen_mode_embed && NOVA.currentPage != 'embed') return;
      NOVA.waitElement('video')
         .then(video => {

            video.addEventListener('play', setFullscreen.bind(video), { capture: true, once: true });

            video.addEventListener('loaddata', setFullscreen.bind(video));

            video.addEventListener('ended', exitFullscreen);
            if (user_settings.player_fullscreen_mode_onpause) {

               video.addEventListener('pause', () => {

                  if (!document.querySelector('.ytp-progress-bar')?.contains(document.activeElement)) {
                     exitFullscreen();
                  }
               });
               video.addEventListener('play', setFullscreen.bind(video));
            }
         });

      function setFullscreen() {
         if (movie_player.classList.contains('ad-showing')) return;

         if (!document.fullscreenElement) {

            movie_player.requestFullscreen()
               .catch(error => console.error('Fullscreen not allowed', error));
         }
      }

      function exitFullscreen() {

         document.fullscreenElement && document?.exitFullscreen();
      }

   },
});
window.nova_plugins.push({
   id: 'player-pin-scroll',
   title: 'Pin player while scrolling',
   run_on_pages: 'watch, -mobile',
   section: 'player',
   _runtime: user_settings => {

      if (!('IntersectionObserver' in window)) return alert('Nova\n\nPin player Error!\nIntersectionObserver not supported.');
      const
         CLASS_VALUE = 'nova-player-pin',
         PINNED_SELECTOR = '.' + CLASS_VALUE,
         UNPIN_BTN_CLASS_VALUE = CLASS_VALUE + '-unpin-btn',
         UNPIN_BTN_SELECTOR = '.' + UNPIN_BTN_CLASS_VALUE;
      document.addEventListener('fullscreenchange', () =>
         (document.fullscreen || movie_player.isFullscreen()) && movie_player.classList.remove(CLASS_VALUE));
      document.addEventListener('scroll', () => {

         NOVA.waitElement('#ytd-player')
            .then(container => {

               new IntersectionObserver(([entry]) => {
                  if (entry.isIntersecting) {
                     movie_player.classList.remove(CLASS_VALUE);
                     drag.reset();
                  }

                  else if (!movie_player.isFullscreen()) {
                     movie_player.classList.add(CLASS_VALUE);
                     drag?.storePos?.X && drag.setTranslate(drag.storePos);
                  }

                  window.dispatchEvent(new Event('resize'));
               }, {
                  threshold: .5,
               })
                  .observe(container);
            });
      }, { capture: true, once: true });

      NOVA.waitElement(PINNED_SELECTOR)
         .then(async player => {

            drag.init(player);
            await NOVA.waitUntil(

               () => (NOVA.videoElement?.videoWidth && !isNaN(NOVA.videoElement.videoWidth)
                  && NOVA.videoElement?.videoHeight && !isNaN(NOVA.videoElement.videoHeight)
               )

               , 500)

            initMiniStyles();

            NOVA.css.push(
               PINNED_SELECTOR + ` {
                  --zIndex: ${Math.max(
                  NOVA.css.getValue('#chat', 'z-index'),
                  NOVA.css.getValue('.ytp-chrome-top .ytp-cards-button', 'z-index'),
                  601) + 1};
               }

               ${UNPIN_BTN_SELECTOR} { display: none; }

               ${PINNED_SELECTOR} ${UNPIN_BTN_SELECTOR} {
                  display: initial !important;
                  position: absolute;
                  cursor: pointer;
                  top: 10px;
                  left: 10px;
                  width: 28px;
                  height: 28px;
                  color: white;
                  border: none;
                  outline: none;
                  opacity: .1;
                  
                  z-index: var(--zIndex);
                  font-size: 24px;
                  font-weight: bold;
                  background-color: rgba(0, 0, 0, 0.8);
                  
               }

               ${PINNED_SELECTOR}:hover ${UNPIN_BTN_SELECTOR} { opacity: .7; }
               ${UNPIN_BTN_SELECTOR}:hover { opacity: 1 !important; }`);
            const btnUnpin = document.createElement('button');
            btnUnpin.className = UNPIN_BTN_CLASS_VALUE;
            btnUnpin.title = 'Unpin player';
            btnUnpin.textContent = '×';
            btnUnpin.addEventListener('click', () => {
               player.classList.remove(CLASS_VALUE);
               drag.reset('clear storePos');
               window.dispatchEvent(new Event('resize'));
            });
            player.append(btnUnpin);
            document.addEventListener('yt-navigate-start', () => {
               if (player.classList.contains(CLASS_VALUE)) {
                  player.classList.remove(CLASS_VALUE);
                  drag.reset('clear storePos');
               }
            });
         });

      function initMiniStyles() {
         const scrollbarWidth = (window.innerWidth - document.documentElement.clientWidth || 0) + 'px';
         const miniSize = NOVA.calculateAspectRatio.sizeToFit({
            'srcWidth': NOVA.videoElement.videoWidth,
            'srcHeight': NOVA.videoElement.videoHeight,
            'maxWidth': (window.innerWidth / user_settings.player_float_scroll_size_ratio),
            'maxHeight': (window.innerHeight / user_settings.player_float_scroll_size_ratio),
         });

         let initcss = {
            width: miniSize.width + 'px',
            height: miniSize.height + 'px',
            position: 'fixed',
            'z-index': 'var(--zIndex)',
            'box-shadow': '0 16px 24px 2px rgba(0, 0, 0, 0.14),' +
               '0 6px 30px 5px rgba(0, 0, 0, 0.12),' +
               '0 8px 10px -5px rgba(0, 0, 0, 0.4)',
         };
         switch (user_settings.player_float_scroll_position) {

            case 'top-left':
               initcss.top = user_settings['header-unfixed'] ? 0
                  : (document.getElementById('masthead-container')?.offsetHeight || 0) + 'px';
               initcss.left = 0;
               break;
            case 'top-right':
               initcss.top = user_settings['header-unfixed'] ? 0
                  : (document.getElementById('masthead-container')?.offsetHeight || 0) + 'px';
               initcss.right = scrollbarWidth;
               break;
            case 'bottom-left':
               initcss.bottom = 0;
               initcss.left = 0;
               break;
            case 'bottom-right':
               initcss.bottom = 0;
               initcss.right = scrollbarWidth;
               break;
         }
         NOVA.css.push(initcss, PINNED_SELECTOR, 'important');
         NOVA.css.push(
            PINNED_SELECTOR + `{
               --height: ${initcss.height} !important;
               --width: ${initcss.width} !important;
            }`);

         NOVA.css.push(`
            ${PINNED_SELECTOR} .ytp-preview,
            ${PINNED_SELECTOR} .ytp-scrubber-container,
            ${PINNED_SELECTOR} .ytp-hover-progress,
            ${PINNED_SELECTOR} .ytp-gradient-bottom { display:none !important; }
            ${PINNED_SELECTOR} .ytp-chrome-bottom { width: var(--width) !important; }
            ${PINNED_SELECTOR} .ytp-chapters-container { display: flex; }`);
         NOVA.css.push(
            `${PINNED_SELECTOR} video {
               width: var(--width) !important;
               height: var(--height) !important;
               left: 0 !important;
               top: 0 !important;
            }

            .ended-mode video {
               visibility: hidden;
            }`);
      }

      const drag = {
         attrNametoLock: 'force_fix_preventDefault',

         reset(clear_storePos) {

            this.dragTarget?.style.removeProperty('transform');
            if (clear_storePos) this.storePos = this.xOffset = this.yOffset = 0;
            else this.storePos = { 'X': this.xOffset, 'Y': this.yOffset };
         },

         init(el_target = required(), callbackExport) {
            this.log('drag init', ...arguments);
            if (!(el_target instanceof HTMLElement)) return console.error('el_target not HTMLElement:', el_target);

            this.dragTarget = el_target;
            document.addEventListener('mousedown', evt => {
               if (!el_target.classList.contains(CLASS_VALUE)) return;
               this.dragStart.apply(this, [evt]);
            });
            document.addEventListener('mouseup', evt => {
               if (this.active) this.dragTarget.removeAttribute(this.attrNametoLock);
               this.dragEnd.apply(this, [evt]);
            });
            document.addEventListener('mousemove', evt => {
               if (this.active && !this.dragTarget.hasAttribute(this.attrNametoLock)) {
                  this.dragTarget.setAttribute(this.attrNametoLock, true);
               }
               this.draging.apply(this, [evt]);
            });
            NOVA.css.push(
               `[${this.attrNametoLock}]:active {
                  pointer-events: none;
                  cursor: grab; 
                  outline: 2px dashed #3ea6ff !important;
               }`);
         },

         dragStart(evt) {
            if (!this.dragTarget.contains(evt.target)) return;
            this.log('dragStart');

            switch (evt.type) {
               case 'touchstart':
                  this.initialX = evt.touches[0].clientX - (this.xOffset || 0);
                  this.initialY = evt.touches[0].clientY - (this.yOffset || 0);
                  break;
               case 'mousedown':
                  this.initialX = evt.clientX - (this.xOffset || 0);
                  this.initialY = evt.clientY - (this.yOffset || 0);
                  break;
            }
            this.active = true;
         },

         dragEnd(evt) {
            if (!this.active) return;
            this.log('dragEnd');

            this.initialX = this.currentX;
            this.initialY = this.currentY;
            this.active = false;
         },

         draging(evt) {
            if (!this.active) return;
            evt.preventDefault();
            evt.stopImmediatePropagation();

            this.log('draging');

            switch (evt.type) {
               case 'touchmove':
                  this.currentX = evt.touches[0].clientX - this.initialX;
                  this.currentY = evt.touches[0].clientY - this.initialY;
                  break;
               case 'mousemove':
                  this.currentX = evt.clientX - this.initialX;
                  this.currentY = evt.clientY - this.initialY;
                  break;
            }

            this.xOffset = this.currentX;
            this.yOffset = this.currentY;

            this.setTranslate({ 'X': this.currentX, 'Y': this.currentY });
         },

         setTranslate({ X = required(), Y = required() }) {
            this.log('setTranslate', ...arguments);
            this.dragTarget.style.transform = `translate3d(${X}px, ${Y}px, 0)`;
         },

         log() {
            if (this.DEBUG && arguments.length) {
               console.groupCollapsed(...arguments);
               console.trace();
               console.groupEnd();
            }
         },
      };
   },
});
window.nova_plugins.push({
   id: 'video-quality',
   title: 'Video quality',
   run_on_pages: 'watch, embed',
   section: 'player',
   _runtime: user_settings => {
      const qualityFormatListWidth = {
         highres: 4320,
         hd2880: 2880,
         hd2160: 2160,
         hd1440: 1440,
         hd1080: 1080,
         hd720: 720,
         large: 480,
         medium: 360,
         small: 240,
         tiny: 144,

      };

      let selectedQuality = user_settings.video_quality;

      NOVA.waitElement('#movie_player')
         .then(movie_player => {

            if (user_settings.video_quality_manual_save_in_tab
               && NOVA.currentPage == 'watch'
            ) {
               movie_player.addEventListener('onPlaybackQualityChange', quality => {

                  if (document.activeElement.getAttribute('role') == 'menuitemradio'
                     && quality !== selectedQuality
                  ) {
                     console.info(`keep quality "${quality}" in the session`);
                     selectedQuality = quality;
                     user_settings.video_quality_in_music_playlist = false;
                  }
               });
            }

            setQuality();

            movie_player.addEventListener('onStateChange', setQuality);
         });

      function setQuality(state) {
         if (!selectedQuality) return console.error('selectedQuality unavailable', selectedQuality);
         if (user_settings.video_quality_in_music_playlist
            && location.search.includes('list=')

            && NOVA.isMusic()
         ) {
            selectedQuality = user_settings.video_quality_in_music_quality;
         }
         if (['PLAYING', 'BUFFERING'].includes(NOVA.getPlayerState(state)) && !setQuality.quality_busy) {
            setQuality.quality_busy = true;

            const waitQuality = setInterval(() => {
               let availableQualityLevels = movie_player.getAvailableQualityLevels();
               const maxQualityIdx = availableQualityLevels
                  .findIndex(i => qualityFormatListWidth[i] <= (window.innerWidth * 1.3));
               availableQualityLevels = availableQualityLevels.slice(maxQualityIdx);
               if (availableQualityLevels?.length) {
                  clearInterval(waitQuality);

                  const maxAvailableQuality = Math.max(availableQualityLevels.indexOf(selectedQuality), 0);
                  const newQuality = availableQualityLevels[maxAvailableQuality];
                  if (movie_player.hasOwnProperty('setPlaybackQuality')) {

                     movie_player.setPlaybackQuality(newQuality);
                  }
                  if (movie_player.hasOwnProperty('setPlaybackQualityRange')) {

                     movie_player.setPlaybackQualityRange(newQuality, newQuality);
                  }
               }
            }, 50);

         }

         else if (state <= 0) {
            setQuality.quality_busy = false;
         }
      }
      NOVA.waitElement('.ytp-error [class*="reason"]')
         .then(error_reason_el => {
            if (alertText = error_reason_el.textContent) {
               throw alertText;
            }
         });

   },
});
window.nova_plugins.push({
   id: 'player-resume-playback',
   title: 'Remember playback time',

   run_on_pages: 'watch, embed',
   section: 'player',
   _runtime: user_settings => {
      if (!navigator.cookieEnabled && NOVA.currentPage == 'embed') return;
      const
         CACHE_PREFIX = 'nova-resume-playback-time',
         getCacheName = () => CACHE_PREFIX + ':' + (NOVA.queryURL.get('v') || movie_player.getVideoData().video_id);

      let cacheName;

      NOVA.waitElement('video')
         .then(video => {
            cacheName = getCacheName();

            resumePlayback.apply(video);

            video.addEventListener('loadeddata', resumePlayback.bind(video));

            video.addEventListener('timeupdate', savePlayback.bind(video));
            if (user_settings.player_resume_playback_url_mark && NOVA.currentPage != 'embed') {

               if (NOVA.queryURL.has('t')) {

                  document.addEventListener('yt-navigate-finish',
                     connectSaveStateInURL.bind(video), { capture: true, once: true });
               }
               else {
                  connectSaveStateInURL.apply(video);
               }
            }
         });

      function savePlayback() {

         if (this.currentTime > 5 && this.duration > 30 && !movie_player.classList.contains('ad-showing')) {

            sessionStorage.setItem(cacheName, ~~this.currentTime);

         }
      }

      function resumePlayback() {
         if (NOVA.queryURL.has('t')
         ) return;

         cacheName = getCacheName();

         if ((time = +sessionStorage.getItem(cacheName))
            && (time < (this.duration - 1))
         ) {

            this.currentTime = time;
         }
      }
      function connectSaveStateInURL() {
         const changeUrl = (new_url = required()) => window.history.replaceState(null, null, new_url);
         let delaySaveOnPauseURL;

         this.addEventListener('pause', () => {

            if (this.currentTime < (this.duration - 1) && this.currentTime > 5 && this.duration > 10) {
               delaySaveOnPauseURL = setTimeout(() => {
                  changeUrl(NOVA.queryURL.set({ 't': ~~this.currentTime + 's' }));
               }, 100);
            }
         });

         this.addEventListener('play', () => {
            if (typeof delaySaveOnPauseURL === 'number') clearTimeout(delaySaveOnPauseURL);

            if (NOVA.queryURL.has('t')) changeUrl(NOVA.queryURL.remove('t'));
         });
      }

   },
});
window.nova_plugins.push({
   id: 'time-jump',
   title: 'Time jump',
   run_on_pages: 'watch, embed, -mobile',
   section: 'player',
   _runtime: user_settings => {

      if (user_settings.time_jump_title_offset) addTitleOffset();
      NOVA.waitElement('video')
         .then(video => video.addEventListener('loadeddata', () => chapterList = []));

      NOVA.waitElement('#movie_player')
         .then(movie_player => {
            let chapterList;

            doubleKeyPressListener(timeLeap, user_settings.time_jump_hotkey);

            function timeLeap() {

               if (chapterList !== null && !chapterList?.length) {
                  chapterList = NOVA.getChapterList(movie_player.getDuration()) || null;

               }
               const
                  nextChapterIndex = chapterList?.findIndex(c => c.sec > movie_player.getCurrentTime()),
                  separator = ' • ';

               let msg;

               if (chapterList?.length
                  && nextChapterIndex !== -1
               ) {
                  const nextChapterData = chapterList?.find(({ sec }) => sec >= movie_player.getCurrentTime());
                  movie_player.seekTo(nextChapterData.sec + .5);
                  msg = nextChapterData.title + separator + nextChapterData.time;
               }

               else {
                  movie_player.seekBy(+user_settings.time_jump_step);

                  msg = `+${user_settings.time_jump_step} sec` + separator + NOVA.timeFormatTo.HMS.digit(movie_player.getCurrentTime());
               }

               NOVA.bezelTrigger(msg);
            }
         });
      function addTitleOffset() {
         NOVA.css.push(
            `.ytp-tooltip-text:after {
               content: attr(data-before);
               color: #ffcc00;
            }`);
         NOVA.waitElement('.ytp-progress-bar')
            .then(progressContainer => {
               if (tooltipEl = document.body.querySelector('.ytp-tooltip-text')) {
                  progressContainer.addEventListener('mousemove', () => {
                     if (movie_player.getVideoData().isLive
                        || (NOVA.currentPage == 'embed' && window.self.location.href.includes('live_stream'))
                     ) return;

                     const
                        cursorTime = NOVA.timeFormatTo.hmsToSec(tooltipEl.textContent),
                        offsetTime = cursorTime - NOVA.videoElement?.currentTime,
                        sign = (offsetTime >= 1) ? '+' : (Math.sign(offsetTime) === -1) ? '-' : '';
                     tooltipEl.setAttribute('data-before', ` ${sign + NOVA.timeFormatTo.HMS.digit(offsetTime)}`);
                  });

                  progressContainer.addEventListener('mouseleave', () => tooltipEl.removeAttribute('data-before'));
               }
            });
      }

      function doubleKeyPressListener(callback, keyCodeFilter) {
         let
            pressed,
            isDoublePress,
            lastPressed = parseInt(keyCodeFilter, 10) || null;

         const
            timeOut = () => setTimeout(() => isDoublePress = false, 500),
            handleDoublePresss = key => {

               if (callback && typeof callback === 'function') return callback(key);
            };

         function keyPress(evt) {
            if (['input', 'textarea'].includes(evt.target.localName) || evt.target.isContentEditable) return;

            pressed = evt.keyCode;

            if (isDoublePress && pressed === lastPressed) {
               isDoublePress = false;
               handleDoublePresss(evt);
            }
            else {
               isDoublePress = true;
               timeOut();
            }

            if (!keyCodeFilter) lastPressed = pressed;
         }
         document.addEventListener('keyup', keyPress);
      }

      if (+user_settings.skip_into_step) {

         NOVA.waitElement('video')
            .then(video => {
               NOVA.runOnPageInitOrTransition(() => {
                  if (NOVA.currentPage == 'watch') {
                     video.addEventListener('canplay', timeLeapInto.bind(video), { capture: true, once: true });
                  }
               });

               function timeLeapInto() {
                  if (!user_settings.skip_into_step_in_music && NOVA.isMusic()) return;

                  const
                     CACHE_PREFIX = 'resume-playback-time',
                     getCacheName = () => CACHE_PREFIX + ':' + (NOVA.queryURL.get('v') || movie_player.getVideoData().video_id);

                  if (user_settings['player-resume-playback']
                     && (saveTime = +sessionStorage.getItem(getCacheName()))
                     && (saveTime > (this.duration - 3))
                  ) return;
                  if (this.duration > 30 && this.currentTime < +user_settings.skip_into_step) {

                     this.currentTime = +user_settings.skip_into_step || 10;
                  }
               }
            });
      }

   },
});
window.nova_plugins.push({
   id: 'player-control-autohide',
   title: 'Hide controls on player',
   run_on_pages: 'watch, -mobile',
   section: 'player',
   _runtime: user_settings => {
      let selector, selectorControlHover, selectorFloatProgressBar;

      switch (user_settings.player_control_autohide_container) {
         case 'player':
            selector = '#movie_player';
            selectorControlHover = '#movie_player:hover .ytp-chrome-bottom';
            selectorFloatProgressBar = '#movie_player:not(:hover)';
            break;
         default:
            selector = '.ytp-chrome-bottom';
            selectorControlHover = '.ytp-chrome-bottom:hover';
            selectorFloatProgressBar = '.ytp-chrome-bottom:not(:hover) ~';
            break;
      }

      NOVA.css.push(
         `.ytp-chrome-bottom, .ytp-gradient-bottom {
            opacity: 0;
         }
         ${selectorControlHover},
         ${selector}:hover .ytp-gradient-bottom {
            opacity: 1;
         }
         
         ${selectorFloatProgressBar} #nova-player-float-progress-bar {
            visibility: visible !important;
         }`);

   },
});
window.nova_plugins.push({
   id: 'embed-show-control-force',
   title: 'Force show control panel in embed',
   run_on_pages: 'embed',
   section: 'player',
   _runtime: user_settings => {
      if (['0', 'false'].includes(NOVA.queryURL.get('controls'))) {
         const changeUrl = (new_url = required()) => window.history.replaceState(null, null, new_url);

         changeUrl(NOVA.queryURL.remove('controls'));
      }

   },
});
window.nova_plugins.push({
   id: 'ad-skip-button',

   title: 'Ad intro skip',
   run_on_pages: 'watch',
   section: 'player',
   _runtime: user_settings => {
      NOVA.waitElement('#movie_player.ad-showing video')
         .then(video => {
            adSkip();

            video.addEventListener('loadedmetadata', adSkip.bind(video));
            video.addEventListener('loadeddata', adSkip.bind(video));
            video.addEventListener('canplay', adSkip.bind(video));

         });
      function adSkip() {
         if (!movie_player.classList.contains('ad-showing')) return;

         this.currentTime = this.duration;

         NOVA.waitElement('div.ytp-ad-text.ytp-ad-skip-button-text:not([hidden]), button.ytp-ad-skip-button:not([hidden])')
            .then(btn => btn.click());
      }
   },
});
window.nova_plugins.push({
   id: 'video-stop-preload',
   title: 'Stop video preload',
   run_on_pages: 'watch, embed',

   section: 'player',
   _runtime: user_settings => {
      if (user_settings.stop_preload_embed && NOVA.currentPage != 'embed') return;

      if (location.hostname == 'youtube.googleapis.com') return;

      NOVA.waitElement('#movie_player')
         .then(async movie_player => {
            let disableStop;
            document.addEventListener('yt-navigate-start', () => disableStop = false);

            movie_player.addEventListener('onStateChange', onPlayerStateChange.bind(this));

            await NOVA.waitUntil(() => movie_player.hasOwnProperty('stopVideo'));
            movie_player.stopVideo();

            function onPlayerStateChange(state) {

               if (user_settings.stop_preload_ignore_playlist && location.search.includes('list=')) return;
               if (user_settings.stop_preload_ignore_live && movie_player.getVideoData().isLive) return;
               if (!disableStop && state > 0 && state < 5) {
                  movie_player.stopVideo();
               }
            }

            document.addEventListener('click', disableHoldStop);
            document.addEventListener('keyup', ({ code }) => (code == 'Space') && disableHoldStop());

            function disableHoldStop() {
               if (!disableStop && movie_player.contains(document.activeElement)) {
                  disableStop = true;
                  movie_player.playVideo();
               }
            }
         });

   },
});
window.nova_plugins.push({
   id: 'subtitle-style',
   title: 'Subtitles (captions) style',
   run_on_pages: 'watch, embed, -mobile',
   section: 'player',
   _runtime: user_settings => {
      const SELECTOR = '.ytp-caption-segment';
      let css = {}

      if (user_settings.subtitle_transparent) {
         css = {
            'background': 'Transparent',
            'text-shadow':
               `rgb(0, 0, 0) 0 0 .1em,
               rgb(0, 0, 0) 0 0 .2em,
               rgb(0, 0, 0) 0 0 .4em`,
         };
      }

      if (user_settings.subtitle_bold) css['font-weight'] = 'bold';

      if (user_settings.subtitle_fixed) {

         NOVA.css.push(

            `.caption-window {
               margin-bottom: 1px !important;
               bottom: 1% !important;
            }`);
      }

      if (user_settings.subtitle_selectable) {
         NOVA.watchElements({
            selectors: [
               SELECTOR,
               '#caption-window-1',
            ]
               .map(i => i + ':not(:empty)'),

            callback: el => {
               el.addEventListener('mousedown', evt => evt.stopPropagation(), true);
               el.setAttribute('draggable', 'false');
               el.setAttribute('selectable', 'true');
               el.style.userSelect = 'text';
               el.style.WebkitUserSelect = 'text';
               el.style.cursor = 'text';
            }
         });
      }

      if (Object.keys(css).length) {
         NOVA.css.push(css, SELECTOR, 'important');
      }

   },
});
window.nova_plugins.push({
   id: 'player-resize-ratio',
   title: 'Player force resize 16:9',
   run_on_pages: 'watch',
   section: 'player',
   _runtime: user_settings => {
      NOVA.waitElement('ytd-watch-flexy:not([theater])')
         .then(ytd_watch => {

            NOVA.waitElement('#movie_player video')
               .then(video => {
                  console.assert(ytd_watch.calculateCurrentPlayerSize_, '"ytd_watch" does not have fn "calculateCurrentPlayerSize_"');

                  const
                     heightRatio = .5625,
                     check4to3 = () => '4:3' == NOVA.calculateAspectRatio.fitToSize({
                        'width': video.videoWidth,
                        'height': video.videoHeight,
                     });
                  if (ytd_watch.calculateCurrentPlayerSize_ && ytd_watch.updateStyles) {
                     const backupFn = ytd_watch.calculateCurrentPlayerSize_;

                     patchYtCalculateFn();

                     video.addEventListener('loadeddata', patchYtCalculateFn);

                     function sizeBypass() {
                        let width = height = NaN;

                        if (!ytd_watch.theater) {
                           width = movie_player.offsetWidth;
                           height = Math.round(movie_player.offsetWidth / (16 / 9));

                           if (ytd_watch.updateStyles) {
                              ytd_watch.updateStyles({
                                 '--ytd-watch-flexy-width-ratio': 1,
                                 '--ytd-watch-flexy-height-ratio': heightRatio,
                              });
                              window.dispatchEvent(new Event('resize'));
                           }
                        }
                        return {
                           'width': width,
                           'height': height,
                        };
                     }

                     function patchYtCalculateFn() {
                        ytd_watch.calculateCurrentPlayerSize_ = check4to3() ? sizeBypass : backupFn;
                     }
                  }

                  else {

                     new MutationObserver(mutationRecordsArray => {
                        if (!ytd_watch.theater && heightRatio != ytd_watch.style.getPropertyValue('--ytd-watch-flexy-height-ratio')) {
                           updateRatio();
                        }
                     })

                        .observe(ytd_watch, { attributes: true, attributeFilter: ['style'] });
                  }

                  window.addEventListener('resize', updateRatio);

                  function updateRatio() {
                     if (check4to3()) {
                        ytd_watch.style.setProperty('--ytd-watch-flexy-width-ratio', 1);
                        ytd_watch.style.setProperty('--ytd-watch-flexy-height-ratio', heightRatio);
                     }
                  }
               });

         });
   },
});
window.nova_plugins.push({
   id: 'theater-mode',
   title: 'Theater mode',
   run_on_pages: 'watch, -mobile',
   section: 'player',
   _runtime: user_settings => {
      if (user_settings.player_full_viewport_mode == 'redirect_watch_to_embed') {
         return location.assign(`https://www.youtube.com/embed/` + NOVA.queryURL.get('v'));
      }
      NOVA.waitElement('ytd-watch-flexy')
         .then(el => el.theaterModeChanged_(true));

      if (user_settings.player_full_viewport_mode == '') return;

      NOVA.waitElement('#movie_player')
         .then(movie_player => {
            const
               PLAYER_CONTAINER_SELECTOR = 'ytd-watch-flexy[theater]:not([fullscreen]) #player-theater-container',
               PLAYER_SCROLL_LOCK_CLASS_NAME = 'nova-lock-scroll',
               PLAYER_SELECTOR = `${PLAYER_CONTAINER_SELECTOR} #movie_player:not(.player-float):not(.${PLAYER_SCROLL_LOCK_CLASS_NAME})`,
               zIindex = Math.max(

                  getComputedStyle(movie_player)['z-index'],
                  2020);

            addScrollDownBehavior();

            switch (user_settings.player_full_viewport_mode) {
               case 'force':

                  setPlayerFullViewport(user_settings.player_full_viewport_mode_exit);

               case 'smart':

                  if (user_settings.player_full_viewport_mode_exclude_shorts && NOVA.currentPage == 'shorts') {
                     return;
                  }

                  NOVA.waitElement('video')
                     .then(video => {
                        video.addEventListener('loadeddata', function () {

                           if (user_settings.player_full_viewport_mode_exclude_shorts && this.videoWidth < this.videoHeight) {
                              return;
                           }
                           const miniSize = NOVA.calculateAspectRatio.sizeToFit({
                              'srcWidth': this.videoWidth,
                              'srcHeight': this.videoHeight,
                           });

                           if (miniSize.width < window.innerWidth) {
                              setPlayerFullViewport('player_full_viewport_mode_exit');
                           }
                        });
                     });
                  break;

               case 'cinema_mode':

                  NOVA.css.push(
                     PLAYER_CONTAINER_SELECTOR + `{ z-index: ${zIindex}; }

                     ${PLAYER_SELECTOR}:before {
                        content: '';
                        position: fixed;
                        top: 0;
                        left: 0;
                        width: 100%;
                        height: 100%;
                        background-color: rgba(0, 0, 0, ${+user_settings.cinema_mode_opacity});
                        opacity: 0;
                        transition: opacity .4s ease-in-out;
                        pointer-events: none;
                     }

                     
                     ${PLAYER_SELECTOR}.playing-mode:before {
                        opacity: 1;
                     }

                     
                     .ytp-ad-player-overlay,
                     #playlist:hover,
                     #masthead-container:hover,
                     iframe, 
                     #guide,
                     [class*="popup"],
                     [role="navigation"],
                     [role="dialog"] {
                        z-index: ${zIindex + 1};
                     }
                     #playlist:hover {
                        position: relative;
                     }
                     
                     body {
                        overflow: hidden;
                     }`);
                  break;
            }

            function setPlayerFullViewport(exclude_pause) {
               const CLASS_OVER_PAUSED = 'nova-player-fullviewport';
               NOVA.css.push(
                  `${PLAYER_SELECTOR}.playing-mode ${exclude_pause ? '' : `, ${PLAYER_SELECTOR}.paused-mode`}, ${PLAYER_SELECTOR}.${CLASS_OVER_PAUSED} {
                     width: 100vw;
                     height: 100vh;
                     position: fixed;
                     bottom: 0 !important;
                     z-index: ${zIindex};
                     background-color: black;
                  }
                  
                  body {
                     overflow: hidden;
                  }`);
               if (user_settings.player_full_viewport_mode_exit) {

                  NOVA.waitElement('video')
                     .then(video => {

                        video.addEventListener('pause', () => {

                           if (!document.querySelector('.ytp-progress-bar')?.contains(document.activeElement)) {
                              window.dispatchEvent(new Event('resize'));
                           }
                        });
                     });
                  NOVA.waitElement('.ytp-progress-bar')
                     .then(progress_bar => {
                        ['mousedown', 'mouseup'].forEach(evt => {
                           progress_bar.addEventListener(evt, () => {
                              movie_player.classList.add(CLASS_OVER_PAUSED);

                           });
                        });
                     });
               }
            }
            function addScrollDownBehavior() {
               if (activateScrollElement = document.body.querySelector('.ytp-chrome-controls')) {

                  activateScrollElement.addEventListener('wheel', evt => {
                     switch (Math.sign(evt.wheelDelta)) {
                        case -1:
                           movie_player.classList.add(PLAYER_SCROLL_LOCK_CLASS_NAME);

                           break;
                     }
                  });

                  document.addEventListener('scroll', evt => {
                     if (window.scrollY === 0
                        && movie_player.classList.contains(PLAYER_SCROLL_LOCK_CLASS_NAME)
                     ) {
                        movie_player.classList.remove(PLAYER_SCROLL_LOCK_CLASS_NAME);
                     }
                  });
               }
            }
         });

   },
});
window.nova_plugins.push({
   id: 'player-buttons-custom',
   title: 'Custom player buttons',
   run_on_pages: 'watch, embed, -mobile',
   section: 'player',
   _runtime: user_settings => {

      const
         SELECTOR_BTN_CLASS_NAME = 'nova-right-custom-button',
         SELECTOR_BTN = '.' + SELECTOR_BTN_CLASS_NAME;
      NOVA.waitElement('.ytp-right-controls')
         .then(async container => {
            NOVA.videoElement = await NOVA.waitElement('video');
            NOVA.css.push(
               `${SELECTOR_BTN} {
                  user-select: none;
                  
               }
               ${SELECTOR_BTN}:hover { color: #66afe9 !important; }
               ${SELECTOR_BTN}:active { color: #2196f3 !important; }`);
            NOVA.css.push(
               `${SELECTOR_BTN}[tooltip]:hover::before {
                  content: attr(tooltip);
                  position: absolute;
                  top: -3em;
                  transform: translateX(-30%);
                  line-height: normal;
                  background-color: rgba(28,28,28,.9);
                  border-radius: 2px;
                  padding: 5px 9px;
                  color: #fff;
                  font-weight: bold;
                  white-space: nowrap;
               }
               
               html[data-cast-api-enabled] ${SELECTOR_BTN}[tooltip]:hover::before {
                  font-weight: normal;
               }`);
            if (user_settings.player_buttons_custom_items?.includes('picture-in-picture')) {
               const pipBtn = document.createElement('button');

               pipBtn.className = `ytp-button ${SELECTOR_BTN_CLASS_NAME}`;

               pipBtn.setAttribute('tooltip', 'Open in PictureInPicture');
               pipBtn.innerHTML = createSVG();
               pipBtn.addEventListener('click', () => document.pictureInPictureElement
                  ? document.exitPictureInPicture() : NOVA.videoElement.requestPictureInPicture()
               );

               container.prepend(pipBtn);
               NOVA.videoElement?.addEventListener('enterpictureinpicture', () => pipBtn.innerHTML = createSVG(2));
               NOVA.videoElement?.addEventListener('leavepictureinpicture', () => pipBtn.innerHTML = createSVG());

               function createSVG(alt) {
                  const svg = document.createElement('svg');
                  svg.setAttribute('width', '100%');
                  svg.setAttribute('height', '100%');
                  svg.setAttribute('viewBox', '-8 -6 36 36');
                  const path = document.createElement("path");
                  path.setAttribute('fill', '#fff');
                  path.setAttribute('d', alt
                     ? 'M18.5,11H18v1h.5A1.5,1.5,0,0,1,20,13.5v5A1.5,1.5,0,0,1,18.5,20h-8A1.5,1.5,0,0,1,9,18.5V18H8v.5A2.5,2.5,0,0,0,10.5,21h8A2.5,2.5,0,0,0,21,18.5v-5A2.5,2.5,0,0,0,18.5,11Z M14.5,4H2.5A2.5,2.5,0,0,0,0,6.5v8A2.5,2.5,0,0,0,2.5,17h12A2.5,2.5,0,0,0,17,14.5v-8A2.5,2.5,0,0,0,14.5,4Z'
                     : 'M2.5,17A1.5,1.5,0,0,1,1,15.5v-9A1.5,1.5,0,0,1,2.5,5h13A1.5,1.5,0,0,1,17,6.5V10h1V6.5A2.5,2.5,0,0,0,15.5,4H2.5A2.5,2.5,0,0,0,0,6.5v9A2.5,2.5,0,0,0,2.5,18H7V17Z M18.5,11h-8A2.5,2.5,0,0,0,8,13.5v5A2.5,2.5,0,0,0,10.5,21h8A2.5,2.5,0,0,0,21,18.5v-5A2.5,2.5,0,0,0,18.5,11Z');
                  svg.append(path);
                  return svg.outerHTML;
               }
            }
            if (user_settings.player_buttons_custom_items?.indexOf('popup') !== -1 && !NOVA.queryURL.has('popup')) {

               const popupBtn = document.createElement('button');
               popupBtn.className = `ytp-button ${SELECTOR_BTN_CLASS_NAME}`;

               popupBtn.setAttribute('tooltip', 'Open in popup');
               popupBtn.innerHTML =
                  `<svg viewBox="-8 -8 36 36" height="100%" width="100%">
                     <g fill="currentColor">
                        <path d="M18 2H6v4H2v12h12v-4h4V2z M12 16H4V8h2v6h6V16z M16 12h-2h-2H8V8V6V4h8V12z" />
                     </g>
                  </svg>`;
               popupBtn.addEventListener('click', () => {
                  const

                     width = screen.width / (+user_settings.player_buttons_custom_popup_width || 4),
                     height = Math.round(width / (16 / 9));

                  url = new URL(
                     document.querySelector('link[itemprop="embedUrl"][href]')?.href
                     || (location.origin + '/embed/' + movie_player.getVideoData().video_id)
                  );
                  if (currentTime = ~~NOVA.videoElement?.currentTime) url.searchParams.set('start', currentTime);
                  url.searchParams.set('autoplay', 1);
                  url.searchParams.set('popup', true);

                  openPopup({ 'url': url.href, 'title': document.title, 'width': width, 'height': height });
               });

               container.prepend(popupBtn);

               function openPopup({ url, title, width, height }) {

                  const left = (screen.width / 2) - (width / 2);
                  const top = (screen.height / 2) - (height / 2);
                  const newWindow = window.open(url, '_blank', `popup=1,toolbar=no,location=no,directories=no,status=no,menubar=no,scrollbars=no,resizable=yes,copyhistory=no,width=${width},height=${height},top=${top},left=${left}`);

                  return;
               }
            }

            if (user_settings.player_buttons_custom_items?.includes('screenshot')) {

               const

                  SELECTOR_SCREENSHOT_ID = 'nova-screenshot-result',
                  SELECTOR_SCREENSHOT = '#' + SELECTOR_SCREENSHOT_ID;

               NOVA.css.push(
                  SELECTOR_SCREENSHOT + ` {
                     --width: 400px;
                     --height: 400px;

                     position: fixed;
                     top: 0;
                     right: 0;
                     overflow: hidden;
                     margin: 36px 30px; 
                     box-shadow: 0 0 15px #000;
                     max-width: var(--width);
                     max-height: var(--height);
                  }
                  
                  

                  

                  ${SELECTOR_SCREENSHOT} canvas {
                     max-width: var(--width);
                     max-height: var(--height);
                     
                  }

                  ${SELECTOR_SCREENSHOT} .close-btn {
                     position: absolute;
                     bottom: 0;
                     right: 0;
                     background-color: rgba(0, 0, 0, .5);
                     color: #FFF;
                     cursor: pointer;
                     font-size: 12px;
                     display: grid;
                     height: 100%;
                     width: 25%;
                  }
                  ${SELECTOR_SCREENSHOT} .close-btn:hover { background-color: rgba(0, 0, 0, .65); }
                  ${SELECTOR_SCREENSHOT} .close-btn > * { margin: auto; }`);

               const screenshotBtn = document.createElement('button');
               screenshotBtn.className = `ytp-button ${SELECTOR_BTN_CLASS_NAME}`;

               screenshotBtn.setAttribute('tooltip', 'Take screenshot');
               screenshotBtn.innerHTML =
                  `<svg viewBox="0 -166 512 860" height="100%" width="100%">
                     <g fill="currentColor">
                        <circle cx="255.811" cy="285.309" r="75.217" />
                        <path d="M477,137H352.718L349,108c0-16.568-13.432-30-30-30H191c-16.568,0-30,13.432-30,30l-3.718,29H34 c-11.046,0-20,8.454-20,19.5v258c0,11.046,8.954,20.5,20,20.5h443c11.046,0,20-9.454,20-20.5v-258C497,145.454,488.046,137,477,137 z M255.595,408.562c-67.928,0-122.994-55.066-122.994-122.993c0-67.928,55.066-122.994,122.994-122.994 c67.928,0,122.994,55.066,122.994,122.994C378.589,353.495,323.523,408.562,255.595,408.562z M474,190H369v-31h105V190z" />
                     </g>
                  </svg>`;
               screenshotBtn.addEventListener('click', () => {
                  const
                     container = document.getElementById(SELECTOR_SCREENSHOT_ID) || document.createElement('a'),
                     canvas = container.querySelector('canvas') || document.createElement('canvas');

                  canvas.width = NOVA.videoElement.videoWidth;
                  canvas.height = NOVA.videoElement.videoHeight
                  canvas.getContext('2d').drawImage(NOVA.videoElement, 0, 0, canvas.width, canvas.height);
                  try {
                     canvas.toBlob(blob => container.href = URL.createObjectURL(blob));

                  } catch (error) {
                  }

                  if (!container.id) {
                     container.id = SELECTOR_SCREENSHOT_ID;
                     container.target = '_blank';
                     container.title = 'Click to save';

                     if (headerContainer = document.getElementById('masthead-container')) {

                        container.style.marginTop = (headerContainer?.offsetHeight || 0) + 'px';

                        container.style.zIndex = +getComputedStyle(headerContainer)['z-index'] + 1;
                     }
                     canvas.addEventListener('click', evt => {
                        evt.preventDefault();
                        downloadCanvasAsImage(evt.target);
                        container.remove();
                     });
                     container.append(canvas);
                     const close = document.createElement('a');
                     close.className = 'close-btn'

                     close.innerHTML = '<span>CLOSE</span>';
                     close.addEventListener('click', evt => {
                        evt.preventDefault();
                        container.remove();
                     });
                     container.append(close);
                     document.body.append(container);
                  }
               });

               function downloadCanvasAsImage(canvas) {
                  const
                     downloadLink = document.createElement('a'),
                     downloadFileName =
                        [
                           movie_player.getVideoData().title
                              .replace(/[\\/:*?"<>|]+/g, '')
                              .replace(/\s+/g, ' ').trim(),
                           `[${NOVA.timeFormatTo.HMS.abbr(NOVA.videoElement.currentTime)}]`,
                        ]
                           .join(' ');

                  downloadLink.href = canvas.toBlob(blob => URL.createObjectURL(blob));
                  downloadLink.download = downloadFileName + '.png';
                  downloadLink.click();
               }
               container.prepend(screenshotBtn);
            }

            if (user_settings.player_buttons_custom_items?.includes('thumbnail')) {
               const thumbBtn = document.createElement('button');
               thumbBtn.className = `ytp-button ${SELECTOR_BTN_CLASS_NAME}`;
               thumbBtn.setAttribute('tooltip', 'View Thumbnail');
               thumbBtn.innerHTML =
                  `<svg viewBox="0 -10 21 40" height="100%" width="100%">
                     <g fill="currentColor">
                        <circle cx='8' cy='7.2' r='2'/>
                        <path d='M0 2v16h20V2H0z M18 16H2V4h16V16z'/>
                        <polygon points='17 10.9 14 7.9 9 12.9 6 9.9 3 12.9 3 15 17 15' />
                     </g>
                  </svg>`;
               thumbBtn.addEventListener('click', async () => {

                  if (NOVA.currentPage == 'watch'
                     && (imgUrl = document.body.querySelector('ytd-watch-flexy')?.playerData?.videoDetails?.thumbnail.thumbnails.pop().url)
                  ) return window.open(imgUrl);
                  const
                     videoId = movie_player.getVideoData().video_id || NOVA.queryURL.get('v'),
                     thumbSizeTemplate = [
                        'maxres',
                        'sd',
                        'hq',
                        'mq',
                        ''
                     ];

                  document.body.style.cursor = 'wait';
                  for (const resPrefix of thumbSizeTemplate) {
                     const
                        imgUrl = `https://i.ytimg.com/vi/${videoId}/${resPrefix}default.jpg`,
                        response = await fetch(imgUrl);

                     if (response.status === 200) {
                        document.body.style.cursor = 'default';
                        window.open(imgUrl);
                        break;
                     }
                  }
               });
               container.prepend(thumbBtn);
            }

            if (user_settings.player_buttons_custom_items?.includes('rotate')) {

               const rotateBtn = document.createElement('button');
               rotateBtn.className = `ytp-button ${SELECTOR_BTN_CLASS_NAME}`;

               rotateBtn.setAttribute('tooltip', 'Rotate video');
               Object.assign(rotateBtn.style, {
                  padding: '0 1.1em',
               });
               rotateBtn.innerHTML =
                  `<svg viewBox="0 0 1536 1536" height="100%" width="100%">
                     <g fill="currentColor">
                        <path
                           d="M1536 128v448q0 26-19 45t-45 19h-448q-42 0-59-40-17-39 14-69l138-138Q969 256 768 256q-104 0-198.5 40.5T406 406 296.5 569.5 256 768t40.5 198.5T406 1130t163.5 109.5T768 1280q119 0 225-52t179-147q7-10 23-12 14 0 25 9l137 138q9 8 9.5 20.5t-7.5 22.5q-109 132-264 204.5T768 1536q-156 0-298-61t-245-164-164-245T0 768t61-298 164-245T470 61 768 0q147 0 284.5 55.5T1297 212l130-129q29-31 70-14 39 17 39 59z"/>
                        </path>
                     </g>
                  </svg>`;
               rotateBtn.addEventListener('click', () => {
                  let angle = parseInt(NOVA.videoElement.style.transform.replace(/\D/, ''), 10) || 0;

                  const scale = (angle === 0 || angle === 180) ? movie_player.clientHeight / NOVA.videoElement.clientWidth : 1;
                  angle += 90;
                  NOVA.videoElement.style.transform = (angle === 360) ? '' : `rotate(${angle}deg) scale(${scale})`;

               });
               container.prepend(rotateBtn);

            }

            if (user_settings.player_buttons_custom_items?.includes('aspect-ratio')) {

               const
                  aspectRatioBtn = document.createElement('a'),
                  aspectRatioList = [
                     { '16:9': 1.335 },
                     { '4:3': .75 },
                     { '9:16': 1.777777778 },
                     { 'auto': 1 },

                  ],
                  genTooltip = (key = 0) => `Switch aspect ratio to ` + Object.keys(aspectRatioList[key]);
               aspectRatioBtn.className = `ytp-button ${SELECTOR_BTN_CLASS_NAME}`;
               aspectRatioBtn.style.textAlign = 'center';
               aspectRatioBtn.style.fontWeight = 'bold';

               aspectRatioBtn.setAttribute('tooltip', genTooltip());
               aspectRatioBtn.innerHTML = '1:1';

               aspectRatioBtn.addEventListener('click', () => {
                  if (!NOVA.videoElement) return;
                  const getNextIdx = () => (this.listIdx < aspectRatioList.length - 1) ? this.listIdx + 1 : 0;

                  this.listIdx = getNextIdx();
                  NOVA.videoElement.style.transform = `scaleX(${Object.values(aspectRatioList[this.listIdx])})`;

                  aspectRatioBtn.setAttribute('tooltip', genTooltip(getNextIdx()));
                  aspectRatioBtn.textContent = Object.keys(aspectRatioList[this.listIdx]);
               });
               container.prepend(aspectRatioBtn);

            }

            if (user_settings.player_buttons_custom_items?.includes('watch-later')) {
               NOVA.waitElement('.ytp-watch-later-button')
                  .then(watchLaterDefault => {

                     NOVA.css.push(
                        `.${SELECTOR_BTN_CLASS_NAME} .ytp-spinner-container {
                           position: relative;
                           top: 0;
                           left: 0;
                           scale: .5;
                           margin: 0;
                        }
                        .${SELECTOR_BTN_CLASS_NAME}.watch-later-btn svg {
                           scale: .85;
                        }`);

                     const watchLaterBtn = document.createElement('button');

                     watchLaterBtn.className = `ytp-button ${SELECTOR_BTN_CLASS_NAME} watch-later-btn`;

                     watchLaterBtn.setAttribute('tooltip', 'Watch later');
                     renderIcon();
                     watchLaterBtn.addEventListener('click', () => {
                        watchLaterDefault.click();
                        renderIcon();
                        const waitStatus = setInterval(() => {

                           if (watchLaterDefault.querySelector('svg')) {

                              clearInterval(waitStatus);
                              renderIcon();
                           }
                        }, 100);

                     });

                     [...document.getElementsByClassName(SELECTOR_BTN_CLASS_NAME)].pop()
                        ?.after(watchLaterBtn);

                     function renderIcon() {
                        watchLaterBtn.innerHTML = watchLaterDefault.querySelector('.ytp-watch-later-icon')?.innerHTML;
                     }
                  });
            }

            if (user_settings.player_buttons_custom_items?.includes('quick-quality')) {
               const

                  SELECTOR_QUALITY_CLASS_NAME = 'nova-quick-quality',
                  SELECTOR_QUALITY = '.' + SELECTOR_QUALITY_CLASS_NAME,
                  qualityContainerBtn = document.createElement('a'),

                  SELECTOR_QUALITY_LIST_ID = SELECTOR_QUALITY_CLASS_NAME + '-list',
                  SELECTOR_QUALITY_LIST = '#' + SELECTOR_QUALITY_LIST_ID,
                  listQuality = document.createElement('ul'),

                  SELECTOR_QUALITY_BTN_ID = SELECTOR_QUALITY_CLASS_NAME + '-btn',
                  qualityBtn = document.createElement('span'),

                  qualityFormatList = {
                     highres: { label: '4320p', badge: '8K' },
                     hd2880: { label: '2880p', badge: '5K' },
                     hd2160: { label: '2160p', badge: '4K' },
                     hd1440: { label: '1440p', badge: 'QHD' },
                     hd1080: { label: '1080p', badge: 'FHD' },

                     hd720: { label: '720p', badge: 'ᴴᴰ' },
                     large: { label: '480p' },
                     medium: { label: '360p' },
                     small: { label: '240p' },
                     tiny: { label: '144p' },
                     auto: { label: 'auto' },
                  };

               NOVA.css.push(
                  SELECTOR_QUALITY + ` {
                     overflow: visible !important;
                     position: relative;
                     text-align: center !important;
                     vertical-align: top;
                     font-weight: bold;
                  }

                  ${SELECTOR_QUALITY_LIST} {
                     position: absolute;
                     bottom: 2.5em !important;
                     left: -2.2em;
                     list-style: none;
                     padding-bottom: 1.5em !important;
                     z-index: ${+getComputedStyle(document.body.querySelector('.ytp-progress-bar'))['z-index'] + 1};
                  }

                  
                  html[data-cast-api-enabled] ${SELECTOR_QUALITY_LIST} {
                     margin: 0;
                     padding: 0;
                     bottom: 3.3em;
                     
                  }

                  ${SELECTOR_QUALITY}:not(:hover) ${SELECTOR_QUALITY_LIST} {
                     display: none;
                  }

                  ${SELECTOR_QUALITY_LIST} li {
                     cursor: pointer;
                     line-height: 1.4;
                     background: rgba(28, 28, 28, 0.9);
                     margin: .3em 0;
                     padding: .5em 3em;
                     border-radius: .3em;
                     color: #fff;
                  }

                  ${SELECTOR_QUALITY_LIST} li .quality-menu-item-label-badge {
                     position: absolute;
                     right: 1em;
                     width: 1.7em;
                  }

                  ${SELECTOR_QUALITY_LIST} li.active { background: #720000; }
                  ${SELECTOR_QUALITY_LIST} li.disable { color: #666; }
                  ${SELECTOR_QUALITY_LIST} li:hover:not(.active) { background: #c00; }`);
               qualityContainerBtn.className = `ytp-button ${SELECTOR_BTN_CLASS_NAME} ${SELECTOR_QUALITY_CLASS_NAME}`;
               qualityBtn.id = SELECTOR_QUALITY_BTN_ID;
               qualityBtn.textContent = qualityFormatList[movie_player.getPlaybackQuality()]?.label || '[out of range]';

               listQuality.id = SELECTOR_QUALITY_LIST_ID;
               movie_player.addEventListener('onPlaybackQualityChange', quality => {
                  document.getElementById(SELECTOR_QUALITY_BTN_ID)
                     .textContent = qualityFormatList[quality]?.label || '[out of range]';
               });

               qualityContainerBtn.prepend(qualityBtn);
               qualityContainerBtn.append(listQuality);

               container.prepend(qualityContainerBtn);

               fillQualityMenu();

               NOVA.videoElement?.addEventListener('canplay', fillQualityMenu);

               function fillQualityMenu() {
                  if (qualityList = document.getElementById(SELECTOR_QUALITY_LIST_ID)) {
                     qualityList.innerHTML = '';

                     movie_player.getAvailableQualityLevels()
                        .forEach(quality => {
                           const qualityItem = document.createElement('li');

                           if (movie_player.getPlaybackQuality() == quality) qualityItem.className = 'active';
                           if (qualityData = qualityFormatList[quality]) {
                              qualityItem.textContent = qualityData.label;
                              if (badge = qualityData.badge) {
                                 qualityItem.insertAdjacentHTML('beforeend',
                                    `<span class="quality-menu-item-label-badge">${badge}</span>`);
                              }
                              if (+(qualityData.label.replace(/[^0-9]/g, '') || 0) <= (window.screen.width * 1.3)) {
                                 qualityItem.addEventListener('click', () => {

                                    movie_player.setPlaybackQualityRange(quality, quality);

                                    if (quality != 'auto') {
                                       qualityList.innerHTML = '';
                                    }
                                 });
                              }
                              else {
                                 qualityItem.className = 'disable';
                                 qualityItem.title = 'Max (window viewport + 30%)';
                              }

                              qualityList.append(qualityItem);
                           }
                        });
                  }
               }
            }

            if (user_settings.player_buttons_custom_items?.includes('toggle-speed')) {
               const
                  speedBtn = document.createElement('a'),
                  hotkey = user_settings.player_buttons_custom_hotkey_toggle_speed || 'a',
                  defaultRateText = '1x',
                  genTooltip = () => `Switch to ${NOVA.videoElement.playbackRate}>${speedBtn.textContent} (${hotkey})`;
               let rateOrig = {};

               speedBtn.className = `ytp-button ${SELECTOR_BTN_CLASS_NAME}`;
               speedBtn.style.textAlign = 'center';
               speedBtn.style.fontWeight = 'bold';
               speedBtn.innerHTML = defaultRateText;

               speedBtn.setAttribute('tooltip', genTooltip());

               document.addEventListener('keyup', evt => {
                  if (['input', 'textarea'].includes(evt.target.localName) || evt.target.isContentEditable) return;
                  if (evt.key === hotkey) {
                     switchRate();
                  }
               });
               speedBtn.addEventListener('click', switchRate);

               function switchRate() {

                  if (Object.keys(rateOrig).length) {
                     playerRate.set(rateOrig);
                     rateOrig = {};
                     speedBtn.innerHTML = defaultRateText;
                  }

                  else {
                     rateOrig = (movie_player && NOVA.videoElement.playbackRate % .25) === 0
                        ? { 'default': movie_player.getPlaybackRate() }
                        : { 'html5': NOVA.videoElement.playbackRate };

                     let resetRate = Object.assign({}, rateOrig);
                     resetRate[Object.keys(resetRate)[0]] = 1;
                     playerRate.set(resetRate);

                     speedBtn.textContent = rateOrig[Object.keys(rateOrig)[0]] + 'x';
                  }

                  speedBtn.setAttribute('tooltip', genTooltip());

               }

               const playerRate = {
                  set(obj) {
                     if (obj.hasOwnProperty('html5') || !movie_player) {
                        NOVA.videoElement.playbackRate = obj.html5;
                     }
                     else {
                        movie_player.setPlaybackRate(obj.default);
                     }

                  },
               };

               container.prepend(speedBtn);

               visibilitySwitch();

               NOVA.videoElement?.addEventListener('ratechange', visibilitySwitch);

               NOVA.videoElement?.addEventListener('loadeddata', () => {
                  rateOrig = {};
                  speedBtn.textContent = defaultRateText;
                  visibilitySwitch();
               });

               function visibilitySwitch() {
                  if (!Object.keys(rateOrig).length) {

                     speedBtn.style.display = (NOVA.videoElement?.playbackRate === 1) ? 'none' : '';
                  }
               }
            }
         });

   },
});
window.nova_plugins.push({
   id: 'video-unblock-region',
   title: 'Try unblock if video not available in your country',
   run_on_pages: 'watch, embed, -mobile',
   section: 'player',
   _runtime: user_settings => {

      NOVA.waitElement('ytd-watch-flexy[player-unavailable]')
         .then(el => el.querySelector('yt-player-error-message-renderer #button.yt-player-error-message-renderer button') || redirect());
      function redirect() {
         location.assign(`${location.protocol}//hooktube.com/watch${location.search}`);

         window.open(`https://watannetwork.com/tools/blocked/#url=${NOVA.queryURL.get('v')}:~:text=Allowed%20countries`);
      }

   },
});
window.nova_plugins.push({
   id: 'player-disable-fullscreen-scroll',
   title: 'Disable scrolling in Full Screen Mode',
   run_on_pages: 'watch',
   section: 'player',
   _runtime: user_settings => {
      NOVA.css.push(`.ytp-fullerscreen-edu-button { display: none !important; }`);

      document.addEventListener('fullscreenchange', () => {
         document.fullscreenElement
            ? document.addEventListener('wheel', lockscroll, { passive: false })
            : document.removeEventListener('wheel', lockscroll)
      }
      );

      function lockscroll(evt) {

         evt.preventDefault();
      }
   },
});
window.nova_plugins.push({
   id: 'time-remaining',
   title: 'Remaining time',
   run_on_pages: 'watch, embed, -mobile',
   section: 'player',
   _runtime: user_settings => {
      const SELECTOR_ID = 'nova-player-time-remaining';
      NOVA.waitElement('.ytp-time-duration, ytm-time-display .time-display-content')
         .then(container => {

            NOVA.waitElement('video')
               .then(video => {
                  video.addEventListener('timeupdate', setRemaining.bind(video));
                  video.addEventListener('ratechange', setRemaining.bind(video));

                  ['suspend', 'ended'].forEach(evt => {
                     video.addEventListener(evt, () => insertToHTML({ 'container': container }));
                  });
                  document.addEventListener('yt-navigate-finish', () => insertToHTML({ 'container': container }));
               });

            function setRemaining() {
               if (isNaN(this.duration)
                  || movie_player.getVideoData().isLive
                  || (NOVA.currentPage == 'embed' && window.self.location.href.includes('live_stream'))
                  || document.visibilityState == 'hidden'
                  || movie_player.classList.contains('ytp-autohide')
               ) return;

               const
                  getProgressPt = () => {
                     const floatRound = pt => (this.duration > 3600) ? pt.toFixed(2)
                        : (this.duration > 1500) ? pt.toFixed(1)
                           : Math.round(pt);
                     return floatRound((this.currentTime / this.duration) * 100) + '%';
                  },
                  getLeftTime = () => '-' + NOVA.timeFormatTo.HMS.digit((this.duration - this.currentTime) / this.playbackRate);

               let text;

               switch (user_settings.time_remaining_mode) {
                  case 'pt': text = ' • ' + getProgressPt(); break;
                  case 'time': text = getLeftTime(); break;

                  default:
                     text = getLeftTime();
                     text += text && ` (${getProgressPt()})`;
               }

               if (text) {
                  insertToHTML({
                     'text': text,
                     'container': container,
                  });
               }
            }

            function insertToHTML({ text = '', container = required() }) {

               if (!(container instanceof HTMLElement)) return console.error('container not HTMLElement:', container);

               (document.getElementById(SELECTOR_ID) || (function () {
                  container.insertAdjacentHTML('afterend', `&nbsp;<span id="${SELECTOR_ID}">${text}</span>`);
                  return document.getElementById(SELECTOR_ID);
               })())
                  .textContent = text;
            }

         });

   },
});
window.nova_plugins.push({
   id: 'player-hotkeys-focused',
   title: 'Player hotkeys always active',
   run_on_pages: 'watch, embed, -mobile',
   section: 'player',
   _runtime: user_settings => {
      document.addEventListener('keydown', ({ target }) => {

         if (['input', 'textarea'].includes(target.localName) || target.isContentEditable) return;
         movie_player.focus();
      });
   },
});
window.nova_plugins.push({
   id: 'video-unblock-warn-content',
   title: 'Skip warn about inappropriate or offensive content',
   run_on_pages: 'watch, embed, -mobile',
   section: 'player',
   _runtime: user_settings => {
      NOVA.waitElement('ytd-watch-flexy[player-unavailable] yt-player-error-message-renderer #button.yt-player-error-message-renderer button')
         .then(btn => btn.click());

   },
});
window.nova_plugins.push({
   id: 'livechat-visibility',
   title: 'Collapse live chat',
   run_on_pages: 'watch, -mobile',

   restart_on_location_change: true,
   section: 'sidebar',
   _runtime: user_settings => {

      if (window['nova-lock-live-chat']) return

      window['nova-lock-live-chat'] = true;

      if (user_settings.livechat_visibility_mode == 'disable') {
         NOVA.waitElement('#chat')
            .then(chat => {
               chat.remove();
               window['nova-lock-live-chat'] = false;
            });
      }
      else {
         NOVA.waitElement('#chat:not([collapsed]) #show-hide-button button')
            .then(btn => {
               btn.click();
               window['nova-lock-live-chat'] = false;
            });
      }

   },
});
window.nova_plugins.push({
   id: 'sidebar-channel-links-patch',
   title: 'Fix channel links in sidebar',
   run_on_pages: 'watch, -mobile',
   section: 'sidebar',
   _runtime: user_settings => {
      document.addEventListener('mouseover', ({ target }) => {
         //console.debug('>', target);

         if (!target.matches('.ytd-channel-name')) return;

         if ((link = target.closest('a'))
            && target.__data?.text?.runs.length
            && target.__data?.text?.runs[0].navigationEndpoint?.commandMetadata?.webCommandMetadata?.webPageType == 'WEB_PAGE_TYPE_CHANNEL'
         ) {
            //const urlOrig = '/watch?v=' + link.data.watchEndpoint.videoId;
            const urlOrig = link.href;
            const url = target.__data.text.runs[0].navigationEndpoint.commandMetadata.webCommandMetadata.url + '/videos';
            link.href = url;
            link.data.commandMetadata.webCommandMetadata.url = url;
            link.data.commandMetadata.webCommandMetadata.webPageType = 'WEB_PAGE_TYPE_CHANNEL';
            link.data.browseEndpoint = target.__data.text.runs[0].navigationEndpoint.browseEndpoint;
            link.data.browseEndpoint.params = encodeURIComponent(btoa(String.fromCharCode(0x12, 0x06) + 'videos'));
            //console.debug('patch link:', 1);
            target.addEventListener('mouseout', ({ target }) => {
               link.href = urlOrig;
               link.data.commandMetadata.webCommandMetadata.url = urlOrig;
               link.data.commandMetadata.webCommandMetadata.webPageType = 'WEB_PAGE_TYPE_WATCH';
               //console.debug('restore link:', 2);
            }, { capture: true, once: true });
         }
      })

   },
});
window.nova_plugins.push({
   id: 'playlist-reverse',
   title: 'Add playlist reverse order button',
   run_on_pages: 'watch, -mobile',

   section: 'sidebar',
   _runtime: user_settings => {

      const
         SELECTOR_ID = 'nova-playlist-reverse-btn',
         SELECTOR = '#' + SELECTOR_ID,
         CLASS_NAME_ACTIVE = 'nova-playlist-reverse-on';

      window.nova_playlistReversed;
      NOVA.css.push(
         SELECTOR + ` {
            background: none;
            border: 0;
         }
         yt-icon-button {
            width: 40px;
            height: 40px;
            padding: 10px;
         }
         ${SELECTOR} svg {
            fill: white;
            fill: var(--yt-spec-text-secondary);
         }
         ${SELECTOR}:hover svg { fill: #66afe9; }

         ${SELECTOR}:active svg,
         ${SELECTOR}.${CLASS_NAME_ACTIVE} svg { fill: #2196f3; }`);

      NOVA.runOnPageInitOrTransition(() => {
         if (location.search.includes('list=') && NOVA.currentPage == 'watch') {

            insertButton();
            reverseControl();
         }
      });

      function insertButton() {
         NOVA.waitElement('ytd-watch-flexy.ytd-page-manager:not([hidden]) ytd-playlist-panel-renderer:not([collapsed]) #playlist-action-menu .top-level-buttons:not([hidden]), #secondary #playlist #playlist-action-menu #top-level-buttons-computed')
            .then(el => rendeButton(el));

         function rendeButton(container = required()) {
            if (!(container instanceof HTMLElement)) return console.error('container not HTMLElement:', container);

            document.getElementById(SELECTOR_ID)?.remove();

            const
               reverseBtn = document.createElement('div'),
               renderTitle = () => reverseBtn.title = `Reverse playlist order is ${window.nova_playlistReversed ? 'ON' : 'OFF'}`;

            if (window.nova_playlistReversed) reverseBtn.className = CLASS_NAME_ACTIVE;
            reverseBtn.id = SELECTOR_ID;
            renderTitle();
            reverseBtn.innerHTML =
               `<yt-icon-button>
                  <svg viewBox="0 0 381.399 381.399" height="100%" width="100%">
                     <g>
                        <path d="M233.757,134.901l-63.649-25.147v266.551c0,2.816-2.286,5.094-5.104,5.094h-51.013c-2.82,0-5.099-2.277-5.099-5.094 V109.754l-63.658,25.147c-2.138,0.834-4.564,0.15-5.946-1.669c-1.389-1.839-1.379-4.36,0.028-6.187L135.452,1.991 C136.417,0.736,137.91,0,139.502,0c1.576,0,3.075,0.741,4.041,1.991l96.137,125.061c0.71,0.919,1.061,2.017,1.061,3.109 c0,1.063-0.346,2.158-1.035,3.078C238.333,135.052,235.891,135.735,233.757,134.901z M197.689,378.887h145.456v-33.62H197.689 V378.887z M197.689,314.444h145.456v-33.622H197.689V314.444z M197.689,218.251v33.619h145.456v-33.619H197.689z"/>
                     </g>
                  </svg>
               </yt-icon-button>`;
            reverseBtn.addEventListener('click', () => {
               reverseBtn.classList.toggle(CLASS_NAME_ACTIVE);
               window.nova_playlistReversed = !window.nova_playlistReversed;

               if (window.nova_playlistReversed) {
                  reverseControl();

                  renderTitle();
                  fixConflictPlugins();
               }
               else location.reload();
            });
            container.append(reverseBtn);
         }
      }

      function fixConflictPlugins() {

         document.getElementById('nova-playlist-duration').innerHTML = '&nbsp; [out of reach] &nbsp;';
         document.getElementById('nova-playlist-autoplay-btn').disabled = true;
         document.getElementById('nova-playlist-autoplay-btn').title = 'out of reach';
      }
      function reverseControl() {
         if (!window.nova_playlistReversed) return;
         NOVA.videoElement?.addEventListener('ended', () =>
            window.nova_playlistReversed && movie_player.previousVideo(), { capture: true, once: true });
         reverseElement(document.body.querySelector('#secondary #playlist #items.playlist-items, ytm-playlist lazy-list'));
         scrollToElement(document.body.querySelector('#secondary #playlist-items[selected], ytm-playlist .item[selected=true]'));
         updateNextButton();
         function updateNextButton() {
            const
               nextItem = document.body.querySelector('#secondary #playlist [selected] + * a'),
               nextURL = nextItem?.querySelector('a')?.href;

            if (!nextURL) return;

            if (next_button = document.body.querySelector('.ytp-next-button')) {
               next_button.href = nextURL;
               next_button.dataset.preview = nextItem.querySelector('img').src;
               next_button.dataset.tooltipText = nextItem.querySelector('#video-title').textContent;
            }
            if (manager = document.body.querySelector('yt-playlist-manager')?.autoplayData.sets[0].nextButtonVideo) {
               manager.commandMetadata.webCommandMetadata.url = nextURL.replace(location.origin, '');
               manager.watchEndpoint.videoId = NOVA.queryURL.get('v', nextURL);
            }
         }

         function reverseElement(container = required()) {
            if (!(container instanceof HTMLElement)) return console.error('container not HTMLElement:', container);
            container.append(...Array.from(container.childNodes).reverse());
         }
      }

      function scrollToElement(targetEl = required()) {
         if (!(targetEl instanceof HTMLElement)) return console.error('targetEl not HTMLElement:', targetEl);
         const container = targetEl.parentElement;
         container.scrollTop = targetEl.offsetTop - container.offsetTop;
      }

   },
});
window.nova_plugins.push({
   id: 'related-visibility',
   title: 'Collapse related section',
   run_on_pages: 'watch, -mobile',
   section: 'sidebar',
   _runtime: user_settings => {

      NOVA.collapseElement({
         selector: '#secondary #related',
         title: 'related',
         remove: (user_settings.related_visibility_mode == 'disable') ? true : false,
      });

   },
});
window.nova_plugins.push({
   id: 'playlist-duration',
   title: 'Show playlist duration',
   run_on_pages: 'watch, playlist, -mobile',
   restart_on_location_change: true,
   section: 'sidebar',
   _runtime: user_settings => {
      const
         SELECTOR_ID = 'nova-playlist-duration',
         playlistId = NOVA.queryURL.get('list');

      if (!playlistId) return;

      switch (NOVA.currentPage) {
         case 'playlist':
            NOVA.waitElement('#stats yt-formatted-string:first-child')
               .then(el => {
                  if (duration = getPlaylistDuration()) {
                     insertToHTML({ 'container': el, 'text': duration });
                  }
                  else {

                     getPlaylistDurationFromThumbnails({
                        'items_selector': '#primary .ytd-thumbnail-overlay-time-status-renderer:not(:empty)',
                     })
                        .then(duration => insertToHTML({ 'container': el, 'text': duration }));
                  }

                  function getPlaylistDuration() {
                     const vids_list = (document.body.querySelector('ytd-app')?.data?.response || window.ytInitialData)
                        .contents.twoColumnBrowseResultsRenderer
                        ?.tabs[0].tabRenderer?.content?.sectionListRenderer
                        ?.contents[0].itemSectionRenderer
                        ?.contents[0].playlistVideoListRenderer?.contents;

                     const duration = vids_list?.reduce((acc, vid) => acc + (isNaN(vid.playlistVideoRenderer?.lengthSeconds) ? 0 : parseInt(vid.playlistVideoRenderer.lengthSeconds), 10), 0);

                     if (duration) return outFormat(duration);
                  }
               });
            break;

         case 'watch':
            NOVA.waitElement('#secondary .index-message-wrapper')
               .then(el => {
                  const waitPlaylist = setInterval(() => {
                     const playlistLength = movie_player.getPlaylist()?.length;

                     let vids_list = document.body.querySelector('ytd-watch-flexy')
                        ?.data?.contents?.twoColumnWatchNextResults?.playlist?.playlist?.contents

                        .filter(i => i.playlistPanelVideoRenderer?.hasOwnProperty('videoId'));

                     console.assert(vids_list?.length === playlistLength, 'playlist loading:', vids_list?.length + '/' + playlistLength);

                     if (vids_list?.length && playlistLength && vids_list?.length === playlistLength) {
                        clearInterval(waitPlaylist);

                        if (duration = getPlaylistDuration(vids_list)) {
                           insertToHTML({ 'container': el, 'text': duration });
                        }

                        else if (!user_settings.playlist_duration_progress_type) {
                           getPlaylistDurationFromThumbnails({
                              'container': document.body.querySelector('#secondary #playlist'),
                              'items_selector': '#playlist-items #unplayableText[hidden]',
                           })
                              .then(duration => insertToHTML({ 'container': el, 'text': duration }));
                        }
                     }
                  }, 1000);

                  function getPlaylistDuration(vids_list = []) {
                     if (window.nova_playlistReversed) vids_list = [...vids_list].reverse();
                     const playingIdx = movie_player.getPlaylistIndex();
                     let total;

                     switch (user_settings.playlist_duration_progress_type) {
                        case 'done':
                           total = getDurationFromList(vids_list);
                           vids_list.splice(playingIdx);

                           break;

                        case 'left':
                           total = getDurationFromList(vids_list);
                           vids_list.splice(0, playingIdx);

                           break;
                     }

                     if ((duration = getDurationFromList(vids_list))
                        || (duration === 0 && user_settings.playlist_duration_progress_type)
                     ) {
                        return outFormat(duration, total);
                     }

                     function getDurationFromList(arr) {
                        return [...arr]
                           .filter(e => e.playlistPanelVideoRenderer?.thumbnailOverlays?.length)
                           .flatMap(e => (time = e.playlistPanelVideoRenderer.thumbnailOverlays[0].thumbnailOverlayTimeStatusRenderer?.text.simpleText)
                              ? NOVA.timeFormatTo.hmsToSec(time) : [])
                           .reduce((acc, time) => acc + time, 0);
                     }
                  }
               });
            break;
      }

      function getPlaylistDurationFromThumbnails({ items_selector = required(), container }) {
         console.log('thumbnails_method', ...arguments);
         if (container && !(container instanceof HTMLElement)) {
            return console.error('container not HTMLElement:', container);
         }

         return new Promise(resolve => {
            let forcePlaylistRun = false;
            const waitThumbnails = setInterval(() => {
               const
                  playlistLength = document.body.querySelector('ytd-player')?.player_?.getPlaylist()?.length || document.body.querySelectorAll(items_selector)?.length,
                  timeStampList = (container || document.body)
                     .querySelectorAll('.ytd-thumbnail-overlay-time-status-renderer:not(:empty)'),
                  duration = getTotalTime(timeStampList);

               console.assert(timeStampList.length === playlistLength, 'playlist loading:', timeStampList.length + '/' + playlistLength);

               if (+duration && timeStampList.length
                  && (timeStampList.length === playlistLength || forcePlaylistRun)
               ) {
                  clearInterval(waitThumbnails);
                  resolve(outFormat(duration));
               }

               else if (!forcePlaylistRun) {
                  setTimeout(() => forcePlaylistRun = true, 1000 * 3);
               }

            }, 500);
         });

         function getTotalTime(nodes) {

            const arr = [...nodes]
               .map(e => NOVA.timeFormatTo.hmsToSec(e.textContent))
               .filter(Number);

            return arr.length && arr.reduce((acc, time) => acc + +time, 0);
         }
      }

      function outFormat(duration = 0, total) {

         let outArr = [];

         outArr.push(NOVA.timeFormatTo.HMS.digit(
            (NOVA.currentPage == 'watch' && NOVA.videoElement?.playbackRate)
               ? duration / NOVA.videoElement.playbackRate : duration
         ));

         if (user_settings.playlist_duration_percentage && total) {
            outArr.push(`(${~~(duration * 100 / total) + '%'})`);
         }

         if (user_settings.playlist_duration_progress_type) {
            outArr.push(user_settings.playlist_duration_progress_type);
         }
         return ' - ' + outArr.join(' ');
      }

      function insertToHTML({ text = '', container = required() }) {

         if (!(container instanceof HTMLElement)) return console.error('container not HTMLElement:', container);

         (document.getElementById(SELECTOR_ID) || (function () {
            const el = document.createElement('span');
            el.id = SELECTOR_ID;
            return container.appendChild(el);
         })())
            .textContent = ' ' + text;
      }

   },
});
window.nova_plugins.push({
   id: 'playlist-toggle-autoplay',
   title: 'Add playlist autoplay control button',
   run_on_pages: 'watch, -mobile',

   section: 'sidebar',
   _runtime: user_settings => {
      if (window.nova_playlistReversed) return;

      const
         SELECTOR_ID = 'nova-playlist-autoplay-btn',
         SELECTOR = '#' + SELECTOR_ID;

      let sesionAutoplayState = user_settings.playlist_autoplay;
      NOVA.css.push(
         `#playlist-action-menu .top-level-buttons {
            align-items: center;
         }
         ${SELECTOR}[type=checkbox] {
            --height: 1em;
            width: 2.2em;
         }
         ${SELECTOR}[type=checkbox]:after {
            transform: scale(1.5);
         }
         ${SELECTOR}[type=checkbox] {
            --opacity: .7;
            --color: #fff;
            height: var(--height);
            line-height: 1.6em;
            border-radius: 3em;
            background-color: var(--paper-toggle-button-unchecked-bar-color, #000000);
            appearance: none;
            -webkit-appearance: none;
            position: relative;
            cursor: pointer;
            outline: 0;
            border: none;
         }
         ${SELECTOR}[type=checkbox]:after {
            position: absolute;
            top: 0;
            left: 0;
            content: '';
            width: var(--height);
            height: var(--height);
            border-radius: 50%;
            background-color: var(--color);
            box-shadow: 0 0 .25em rgba(0, 0, 0, .3);
            
         }
         ${SELECTOR}[type=checkbox]:checked:after {
            left: calc(100% - var(--height));
            --color: var(--paper-toggle-button-checked-button-color, var(--primary-color));
         }
         ${SELECTOR}[type=checkbox]:focus, input[type=checkbox]:focus:after {
            transition: all 200ms ease-in-out;
         }
         ${SELECTOR}[type=checkbox]:disabled {
            opacity: .3;
         }`);

      NOVA.runOnPageInitOrTransition(() => {
         if (window.nova_playlistReversed) return;
         if (location.search.includes('list=') && NOVA.currentPage == 'watch') {

            insertButton();
         }
      });

      function insertButton() {
         NOVA.waitElement('ytd-watch-flexy.ytd-page-manager:not([hidden]) ytd-playlist-panel-renderer:not([collapsed]) #playlist-action-menu .top-level-buttons:not([hidden]), #secondary #playlist #playlist-action-menu #top-level-buttons-computed')
            .then(el => renderCheckbox(el));

         function renderCheckbox(container = required()) {
            if (!(container instanceof HTMLElement)) return console.error('container not HTMLElement:', container);

            document.getElementById(SELECTOR_ID)?.remove();

            const checkboxBtn = document.createElement('input');

            checkboxBtn.id = SELECTOR_ID;
            checkboxBtn.type = 'checkbox';
            checkboxBtn.title = 'Playlist toggle autoplay';
            checkboxBtn.addEventListener('change', ({ target }) => {

               sesionAutoplayState = target.checked;
               setAssociatedAutoplay();
            });
            container.append(checkboxBtn);

            checkboxBtn.checked = sesionAutoplayState;

            setAssociatedAutoplay();
            function setAssociatedAutoplay() {

               if (manager = document.body.querySelector('yt-playlist-manager')) {
                  manager.interceptedForAutoplay = true;
                  manager.canAutoAdvance_ = checkboxBtn.checked;
                  checkboxBtn.checked = manager?.canAutoAdvance_;
                  checkboxBtn.title = `Playlist Autoplay is ${manager?.canAutoAdvance_ ? 'ON' : 'OFF'}`;

                  if (checkboxBtn.checked) checkHiddenVideo();
               }
               else console.error('Error playlist-autoplay. Playlist manager is', manager);
               async function checkHiddenVideo() {
                  let vids_list;
                  await NOVA.waitUntil(() => {
                     if ((vids_list = document.body.querySelector('ytd-watch-flexy')?.data?.contents?.twoColumnWatchNextResults?.playlist?.playlist?.contents)
                        && vids_list.length) return true;
                  }, 1000);

                  const
                     playingIdx = movie_player.getPlaylistIndex(),
                     lastAvailableIdx = vids_list.findIndex(i => i.hasOwnProperty('messageRenderer')) - 1;
                  if (playingIdx === lastAvailableIdx) {
                     manager.canAutoAdvance_ = false;
                     alert('Playlist has hide video. Playlist autoplay disabled');
                     checkboxBtn.checked = false;
                  }
               }
            }

         }
      }

   },
});
window.nova_plugins.push({
   id: 'playlist-collapse',
   title: 'Playlist auto-collapse',
   run_on_pages: 'watch, -mobile',
   section: 'sidebar',
   _runtime: user_settings => {
      if (!location.search.includes('list=')) return;
      NOVA.waitElement('#secondary #playlist:not([collapsed]) #expand-button button')
         .then(btn => btn.click());
   },
});
const Plugins = {
   run: ({ user_settings, app_ver }) => {

      if (!window.nova_plugins?.length) return console.error('nova_plugins empty', window.nova_plugins);
      if (!user_settings) return console.error('user_settings empty', user_settings);
      NOVA.currentPage = (function () {
         const [page, channelTab] = location.pathname.split('/').filter(Boolean);
         NOVA.channelTab = channelTab;
         return (page != 'live_chat')
            && (['channel', 'c', 'user'].includes(page)
               || page?.startsWith('@')
               || /[A-Z\d_]/.test(page)
               || ['featured', 'videos', 'shorts', 'streams', 'playlists', 'community', 'channels', 'about'].includes(channelTab)

            ) ? 'channel' : (page == 'clip') ? 'watch' : page || 'home';
      })();
      NOVA.isMobile = location.host == 'm.youtube.com';

      let logTableArray = [],
         logTableStatus,
         logTableTime;
      window.nova_plugins?.forEach(plugin => {
         const pagesAllowList = plugin?.run_on_pages?.split(',').map(p => p.trim().toLowerCase()).filter(Boolean);

         logTableTime = 0;
         logTableStatus = false;

         if (!pluginChecker(plugin)) {
            console.error('Plugin invalid\n', plugin);
            alert('Plugin invalid: ' + plugin?.id);
            logTableStatus = 'INVALID';
         }
         else if (plugin.was_init && !plugin.restart_on_location_change) {
            logTableStatus = 'skiped';
         }
         else if (!user_settings.hasOwnProperty(plugin.id)) {
            logTableStatus = 'off';
         }
         else if (
            (
               pagesAllowList?.includes(NOVA.currentPage)
               || (pagesAllowList?.includes('all') && !pagesAllowList?.includes('-' + NOVA.currentPage))
            )
            && (!NOVA.isMobile || (NOVA.isMobile && !pagesAllowList?.includes('-mobile')))
         ) {
            try {
               const startTableTime = performance.now();
               plugin.was_init = true;
               plugin._runtime(user_settings);

               logTableTime = (performance.now() - startTableTime).toFixed(2);
               logTableStatus = true;

            } catch (err) {
               console.groupEnd('plugins status');
               console.error(`[ERROR PLUGIN] ${plugin.id}\n${err.stack}\n\nPlease report the bug: https://github.com/raingart/Nova-YouTube-extension/issues/new?body=` + encodeURIComponent(app_ver + ' | ' + navigator.userAgent));

               if (user_settings.report_issues && _pluginsCaptureException) {
                  _pluginsCaptureException({
                     'trace_name': plugin.id,
                     'err_stack': err.stack,
                     'app_ver': app_ver,
                     'confirm_msg': `ERROR in Nova YouTube™\n\nCrash plugin: "${plugin.title}"\nPlease report the bug or disable the plugin\n\nSend the bug raport to developer?`,
                  });
               }

               console.groupCollapsed('plugins status');
               logTableStatus = 'ERROR';
            }
         }

         logTableArray.push({
            'launched': logTableStatus,
            'name': plugin?.id,
            'time init (ms)': logTableTime,
         });
      });
      console.table(logTableArray);
      console.groupEnd('plugins status');

      function pluginChecker(plugin) {
         const result = plugin?.id && plugin.run_on_pages && 'function' === typeof plugin._runtime;
         if (!result) {
            console.error('plugin invalid:\n', {
               'id': plugin?.id,
               'run_on_pages': plugin?.run_on_pages,
               '_runtime': 'function' === typeof plugin?._runtime,
            });
         }
         return result;
      }
   },
}
console.log('%c ', 'color:#0096fa; font-weight:bold;', GM_info.script.name + ' v.' + GM_info.script.version);

const
   optionsPage = 'https://raingart.github.io/options.html',
   configStoreName = 'user_settings',
   fix_undefine = v => (v === 'undefined') ? undefined : v,
   user_settings = fix_undefine(GM_getValue(configStoreName)) || {};
if (user_settings?.exclude_iframe && (window.frameElement || window.self !== window.top)) {
   return console.warn(GM_info.script.name + ': processed in the iframe disable');
}
if (isOptionsPage()) return;

if (!user_settings?.disable_setting_button) insertSettingButton();

landerPlugins();

function isOptionsPage() {

   GM_registerMenuCommand('Settings', () => GM_openInTab(optionsPage));
   GM_registerMenuCommand('Import settings', () => {
      const f = document.createElement('input');
      f.type = 'file';
      f.accept = 'application/JSON';
      f.style.display = 'none';
      f.addEventListener('change', function () {
         if (f.files.length !== 1) return alert('file empty');
         const rdr = new FileReader();
         rdr.addEventListener('load', function () {
            try {
               GM_setValue(configStoreName, JSON.parse(rdr.result));
               alert('Settings imported');
               location.reload();
            }
            catch (err) {
               alert(`Error parsing settings\n${err.name}: ${err.message}`);
            }
         });
         rdr.addEventListener('error', error => alert('Error loading file\n' + rdr?.error || error));
         rdr.readAsText(f.files[0]);
      });
      document.body.append(f);
      f.click();
      f.remove();
   });
   GM_registerMenuCommand('Export settings', () => {
      let d = document.createElement('a');
      d.style.display = 'none';
      d.download = 'nova-settings.json';
      d.href = 'data:text/plain;charset=utf-8,' + encodeURIComponent(JSON.stringify(user_settings));
      document.body.append(d);
      d.click();
      d.remove();
   });
   if (location.hostname === new URL(optionsPage).hostname) {

      document.addEventListener('submit', event => {

         event.preventDefault();

         let obj = {};
         for (const [key, value] of new FormData(event.target)) {

            if (obj.hasOwnProperty(key)) {
               obj[key] += ',' + value;
               obj[key] = obj[key].split(',');
            }
            else {

               switch (value) {
                  case 'true': obj[key] = true; break;
                  case 'false': obj[key] = false; break;
                  case 'undefined': obj[key] = undefined; break;
                  default: obj[key] = value;
               }
            };
         }
         console.debug(`update ${configStoreName}:`, obj);
         GM_setValue(configStoreName, obj);
      });

      window.addEventListener('DOMContentLoaded', () => {
         localizePage(user_settings?.lang_code);
         storeData = user_settings;
      });

      window.addEventListener('load', () => {

         document.body?.classList?.remove('preload');

         document.body.querySelector('a[href$="issues/new"]')
            .addEventListener('click', ({ target }) => {
               target.href += '?body=' + encodeURIComponent(GM_info.script.version + ' | ' + navigator.userAgent);
            });
      });
   }

   else if (!user_settings || !Object.keys(user_settings).length) {
      user_settings['report_issues'] = 'on';
      GM_setValue(configStoreName, user_settings);

      if (confirm('Active plugins undetected. Open the settings page now?')) GM_openInTab(optionsPage);
   }

   else return false;

   return true;
}

function landerPlugins() {
   processLander();

   let playlist_page_transition_count = 0;

   function processLander() {
      const plugins_lander = setInterval(() => {

         const domLoaded = document?.readyState != 'loading';
         if (!domLoaded) return console.debug('waiting, page loading..');

         clearInterval(plugins_lander);
         console.groupCollapsed('plugins status');

         Plugins.run({
            'user_settings': user_settings,
            'app_ver': GM_info.script.version,
         });

      }, 500);
   }

   let lastUrl = location.href;
   const isURLChanged = () => lastUrl == location.href ? false : lastUrl = location.href;

   document.addEventListener('yt-navigate-start', () => isURLChanged() && processLander());
}
function insertSettingButton() {
   NOVA.waitElement('#masthead #end')
      .then(menu => {
         const titleMsg = 'Nova Settings';
         const a = document.createElement('a');
         a.id = 'nova_settings_button';
         a.href = optionsPage + '?tabs=tab-plugins';
         a.target = '_blank';
         a.innerHTML =
            `<yt-icon-button class="style-scope ytd-button-renderer style-default size-default">
               <svg viewBox="-4 0 20 16">
                  <radialGradient id="nova-gradient" gradientUnits="userSpaceOnUse" cx="6" cy="22" r="18.5">
                     <stop class="nova-gradient-start" offset="0"/>
                     <stop class="nova-gradient-stop" offset="1"/>
                  </radialGradient>
                  <g fill="deepskyblue">
                     <polygon points="0,16 14,8 0,0"/>
                  </g>
               </svg>
            </yt-icon-button>`;
         a.addEventListener('click', () => {
            setTimeout(() => document.body.click(), 200);
         });
         a.title = titleMsg;
         const tooltip = document.createElement('tp-yt-paper-tooltip');
         tooltip.className = 'style-scope ytd-topbar-menu-button-renderer';

         tooltip.textContent = titleMsg;

         a.appendChild(tooltip);
         menu.prepend(a);

         NOVA.css.push(
            `#nova_settings_button[tooltip]:hover:after {
               position: absolute;
               top: 50px;
               transform: translateX(-50%);
               content: attr(tooltip);
               text-align: center;
               min-width: 3em;
               max-width: 21em;
               white-space: nowrap;
               overflow: hidden;
               text-overflow: ellipsis;
               padding: 1.8ch 1.2ch;
               border-radius: 0.6ch;
               background-color: #616161;
               box-shadow: 0 1em 2em -0.5em rgb(0 0 0 / 35%);
               color: #fff;
               z-index: 1000;
            }

            #nova_settings_button {
               position: relative;
               opacity: .3;
               transition: opacity .3s ease-out;
            }

            #nova_settings_button:hover {
               opacity: 1 !important;
            }

            #nova_settings_button path,
            #nova_settings_button polygon {
               fill: url(#nova-gradient);
            }

            #nova_settings_button .nova-gradient-start,
            #nova_settings_button .nova-gradient-stop {
               transition: .6s;
               stop-color: #7a7cbd;
            }

            #nova_settings_button:hover .nova-gradient-start {
               stop-color: #0ff;
            }

            #nova_settings_button:hover .nova-gradient-stop {
               stop-color: #0095ff;
               
            }`);
      });
}

function _pluginsCaptureException({ trace_name, err_stack, confirm_msg, app_ver }) {
   if (confirm(confirm_msg || `Error in ${GM_info.script.name}. Send the bug raport to developer?`)) {
      openBugReport();
   }

   function openBugReport() {

      GM_openInTab(
         'https://docs.google.com/forms/u/0/d/e/1FAIpQLScfpAvLoqWlD5fO3g-fRmj4aCeJP9ZkdzarWB8ge8oLpE5Cpg/viewform' +
         '?entry.35504208=' + encodeURIComponent(trace_name) +
         '&entry.151125768=' + encodeURIComponent(err_stack) +
         '&entry.744404568=' + encodeURIComponent(location.href) +
         '&entry.1416921320=' + encodeURIComponent(app_ver + ' | ' + navigator.userAgent + ' [' + window.navigator.language + ']'));

   }
};

window.addEventListener('unhandledrejection', err => {
   //if (!err.reason.stack.toString().includes(${JSON.stringify(chrome.runtime.id)})) return;
   console.error('[ERROR PROMISE]\n', err.reason, '\nPlease report the bug: https://github.com/raingart/Nova-YouTube-extension/issues/new?body=' + encodeURIComponent(GM_info.script.version + ' | ' + navigator.userAgent));
   if (user_settings.report_issues && (err.reason?.stack || err.stack)?.includes('Nova'))
      _pluginsCaptureException({
         'trace_name': 'unhandledrejection',
         'err_stack': err.reason.stack || err.stack,
         'app_ver': GM_info.script.version,
         'confirm_msg': `Failure when async-call of one "${GM_info.script.name}" plugin.\nDetails in the console\n\nOpen tab to report the bug?`,
      });
});
